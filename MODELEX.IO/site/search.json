[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MODELEX.IO",
    "section": "",
    "text": "A first look at a neural network\n\n\n\n\n\n\n\nNeural Network\n\n\nDeep Learning\n\n\nimages classification\n\n\nhandwritten digits\n\n\nKeras\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nClassifying movie reviews: a binary classification example\n\n\n\n\n\n\n\nNeural Network\n\n\nDeep Learning\n\n\nNLP\n\n\nBinary classification\n\n\nSentiment analysis\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClassifying newswires: a multi-class classification example\n\n\n\n\n\n\n\nNeural Network\n\n\nDeep Learning\n\n\nReuters dataset\n\n\nNewswires\n\n\nNLP\n\n\nClassification\n\n\nKeras\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverfitting and underfitting\n\n\n\n\n\n\n\nNeural Network\n\n\nDeep Learning\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nText generation with LSTM\n\n\n\n\n\n\n\nNLP\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to modelex.io, an online platform dedicated to the application of machine learning and deep learning.\nOur website is designed to bring together a community passionate about the recent advances in the fields of machine learning and deep learning. We believe that these technologies have the potential to revolutionize many sectors, from industry to healthcare, finance, and entertainment.\nOn modelex.io, you will find informative and instructive blog articles on the latest advances in machine learning, as well as practical tutorials to help you get started applying these technologies yourself. We cover a variety of topics, from supervised and unsupervised learning to deep neural networks, natural language processing, and computer vision."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "A first look at a neural network",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 2, Section 1 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Text generation with LSTM",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 8, Section 1 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments."
  },
  {
    "objectID": "posts/welcome/index.html#implementing-character-level-lstm-text-generation",
    "href": "posts/welcome/index.html#implementing-character-level-lstm-text-generation",
    "title": "Text generation with LSTM",
    "section": "Implementing character-level LSTM text generation",
    "text": "Implementing character-level LSTM text generation\nLet’s put these ideas in practice in a Keras implementation. The first thing we need is a lot of text data that we can use to learn a language model. You could use any sufficiently large text file or set of text files – Wikipedia, the Lord of the Rings, etc. In this example we will use some of the writings of Nietzsche, the late-19th century German philosopher (translated to English). The language model we will learn will thus be specifically a model of Nietzsche’s writing style and topics of choice, rather than a more generic model of the English language."
  },
  {
    "objectID": "posts/welcome/index.html#preparing-the-data",
    "href": "posts/welcome/index.html#preparing-the-data",
    "title": "Text generation with LSTM",
    "section": "Preparing the data",
    "text": "Preparing the data\nLet’s start by downloading the corpus and converting it to lowercase:\n\nlibrary(keras)\nlibrary(stringr)\n\npath <- get_file(\n  \"nietzsche.txt\",\n  origin = \"https://s3.amazonaws.com/text-datasets/nietzsche.txt\"\n)\ntext <- tolower(readChar(path, file.info(path)$size))\ncat(\"Corpus length:\", nchar(text), \"\\n\")\n\nCorpus length: 600893 \n\n\nNext, you’ll extract partially overlapping sequences of length maxlen, one-hot encode them, and pack them in a 3D array x of shape (sequences, maxlen, unique_characters). Simultaneously, you’ll prepare an array y containing the corresponding targets: the one-hot-encoded characters that come after each extracted sequence.\n\nmaxlen <- 60  # Length of extracted character sequences\n\nstep <- 3  # We sample a new sequence every `step` characters\n  \ntext_indexes <- seq(1, nchar(text) - maxlen, by = step)\n\n# This holds our extracted sequences\nsentences <- str_sub(text, text_indexes, text_indexes + maxlen - 1)\n\n# This holds the targets (the follow-up characters)\nnext_chars <- str_sub(text, text_indexes + maxlen, text_indexes + maxlen)\n\ncat(\"Number of sequences: \", length(sentences), \"\\n\")\n\nNumber of sequences:  200278 \n\n# List of unique characters in the corpus\nchars <- unique(sort(strsplit(text, \"\")[[1]]))\ncat(\"Unique characters:\", length(chars), \"\\n\")\n\nUnique characters: 57 \n\n# Dictionary mapping unique characters to their index in `chars`\nchar_indices <- 1:length(chars) \nnames(char_indices) <- chars\n\n# Next, one-hot encode the characters into binary arrays.\ncat(\"Vectorization...\\n\") \n\nVectorization...\n\nx <- array(0L, dim = c(length(sentences), maxlen, length(chars)))\ny <- array(0L, dim = c(length(sentences), length(chars)))\nfor (i in 1:length(sentences)) {\n  sentence <- strsplit(sentences[[i]], \"\")[[1]]\n  for (t in 1:length(sentence)) {\n    char <- sentence[[t]]\n    x[i, t, char_indices[[char]]] <- 1\n  }\n  next_char <- next_chars[[i]]\n  y[i, char_indices[[next_char]]] <- 1\n}"
  },
  {
    "objectID": "posts/welcome/index.html#building-the-network",
    "href": "posts/welcome/index.html#building-the-network",
    "title": "Text generation with LSTM",
    "section": "Building the network",
    "text": "Building the network\nThis network is a single LSTM layer followed by a dense classifier and softmax over all possible characters. But note that recurrent neural networks aren’t the only way to do sequence data generation; 1D convnets also have proven extremely successful at this task in recent times.\n\nmodel <- keras_model_sequential() %>% \n  layer_lstm(units = 128, input_shape = c(maxlen, length(chars))) %>% \n  layer_dense(units = length(chars), activation = \"softmax\")\n\nSince our targets are one-hot encoded, we will use categorical_crossentropy as the loss to train the model:\n\noptimizer <- optimizer_rmsprop(lr = 0.01)\n\nmodel %>% compile(\n  loss = \"categorical_crossentropy\", \n  optimizer = optimizer\n)"
  },
  {
    "objectID": "posts/welcome/index.html#training-the-language-model-and-sampling-from-it",
    "href": "posts/welcome/index.html#training-the-language-model-and-sampling-from-it",
    "title": "Text generation with LSTM",
    "section": "Training the language model and sampling from it",
    "text": "Training the language model and sampling from it\nGiven a trained model and a seed text snippet, we generate new text by repeatedly:\n\n\nDrawing from the model a probability distribution over the next character given the text available so far\n\n\nReweighting the distribution to a certain “temperature”\n\n\nSampling the next character at random according to the reweighted distribution\n\n\nAdding the new character at the end of the available text\n\n\nThis is the code we use to reweight the original probability distribution coming out of the model, and draw a character index from it (the “sampling function”):\n\nsample_next_char <- function(preds, temperature = 1.0) {\n  preds <- as.numeric(preds)\n  preds <- log(preds) / temperature\n  exp_preds <- exp(preds)\n  preds <- exp_preds / sum(exp_preds)\n  which.max(t(rmultinom(1, 1, preds)))\n}\n\nFinally, the following loop repeatedly trains and generates text. You begin generating text using a range of different temperatures after every epoch. This allows you to see how the generated text evolves as the model begins to converge, as well as the impact of temperature in the sampling strategy.\n\nfor (epoch in 1:2) {\n  \n  cat(\"epoch\", epoch, \"\\n\")\n  \n  # Fit the model for 1 epoch on the available training data\n  model %>% fit(x, y, batch_size = 128, epochs = 1) \n  \n  # Select a text seed at random\n  start_index <- sample(1:(nchar(text) - maxlen - 1), 1)  \n  seed_text <- str_sub(text, start_index, start_index + maxlen - 1)\n  \n  cat(\"--- Generating with seed:\", seed_text, \"\\n\\n\")\n  \n  for (temperature in c(0.2, 0.5, 1.0, 1.2)) {\n    \n    cat(\"------ temperature:\", temperature, \"\\n\")\n    cat(seed_text, \"\\n\")\n    \n    generated_text <- seed_text\n    \n     # We generate 20 characters\n    for (i in 1:20) {\n      \n      sampled <- array(0, dim = c(1, maxlen, length(chars)))\n      generated_chars <- strsplit(generated_text, \"\")[[1]]\n      for (t in 1:length(generated_chars)) {\n        char <- generated_chars[[t]]\n        sampled[1, t, char_indices[[char]]] <- 1\n      }\n        \n      preds <- model %>% predict(sampled, verbose = 0)\n      next_index <- sample_next_char(preds[1,], temperature)\n      next_char <- chars[[next_index]]\n      \n      generated_text <- paste0(generated_text, next_char)\n      generated_text <- substring(generated_text, 2)\n      \n      cat(next_char)\n    }\n    cat(\"\\n\\n\")\n  }\n}\n\nepoch 1 \n--- Generating with seed: c philosophy must be very much on its guard lest on\naccount  \n\n------ temperature: 0.2 \nc philosophy must be very much on its guard lest on\naccount  \nand and anderes and \n\n------ temperature: 0.5 \nc philosophy must be very much on its guard lest on\naccount  \nin and in thor the b\n\n------ temperature: 1 \nc philosophy must be very much on its guard lest on\naccount  \nfiongopor ingelstron\n\n------ temperature: 1.2 \nc philosophy must be very much on its guard lest on\naccount  \ntf\nrhusy; _ape vo th\n\nepoch 2 \n--- Generating with seed: tep, not the opposite of it.\n\n\n\n\nthe religious life.\n\n\n108\n\n \n\n------ temperature: 0.2 \ntep, not the opposite of it.\n\n\n\n\nthe religious life.\n\n\n108\n\n \nhis in the bed and t\n\n------ temperature: 0.5 \ntep, not the opposite of it.\n\n\n\n\nthe religious life.\n\n\n108\n\n \n a be merse bely the\n\n------ temperature: 1 \ntep, not the opposite of it.\n\n\n\n\nthe religious life.\n\n\n108\n\n \n\" kin the , wo the d\n\n------ temperature: 1.2 \ntep, not the opposite of it.\n\n\n\n\nthe religious life.\n\n\n108\n\n \ncasdtoney of comyeva\n\n\nHere, we used the random seed text “new faculty, and the jubilation reached its climax when kant.” Here’s what you get at epoch 20, long before the model has fully converged, with temperature=0.2:\nnew faculty, and the jubilation reached its climax when kant and such a man\nin the same time the spirit of the surely and the such the such \nas a man is the sunligh and subject the present to the superiority of the \nspecial pain the most man and strange the subjection of the \nspecial conscience the special and nature and such men the subjection of the\nspecial men, the most surely the subjection of the special \nintellect of the subjection of the same things and\nHere’s the result with temperature=0.5:\nnew faculty, and the jubilation reached its climax when kant in the eterned \nand such man as it's also become himself the condition of the \nexperience of off the basis the superiory and the special morty of the \nstrength, in the langus, as which the same time life and \"even who \ndiscless the mankind, with a subject and fact all you have to be the stand\nand lave no comes a troveration of the man and surely the \nconscience the superiority, and when one must be w\nAnd here’s what you get with temperature=1.0:\nnew faculty, and the jubilation reached its climax when kant, as a \nperiliting of manner to all definites and transpects it it so \nhicable and ont him artiar resull\ntoo such as if ever the proping to makes as cnecience. to been juden, \nall every could coldiciousnike hother aw passife, the plies like \nwhich might thiod was account, indifferent germin, that everythery \ncertain destrution, intellect into the deteriorablen origin of moralian, \nand a lessority o\nAt epoch 60, the model has mostly converged, and the text starts to look significantly more coherent. Here’s the result with temperature=0.2:\ncheerfulness, friendliness and kindness of a heart are the sense of the \nspirit is a man with the sense of the sense of the world of the \nself-end and self-concerning the subjection of the strengthorixes--the \nsubjection of the subjection of the subjection of the \nself-concerning the feelings in the superiority in the subjection of the \nsubjection of the spirit isn't to be a man of the sense of the \nsubjection and said to the strength of the sense of the\nHere is temperature=0.5:\ncheerfulness, friendliness and kindness of a heart are the part of the soul\nwho have been the art of the philosophers, and which the one \nwon't say, which is it the higher the and with religion of the frences. \nthe life of the spirit among the most continuess of the \nstrengther of the sense the conscience of men of precisely before enough \npresumption, and can mankind, and something the conceptions, the \nsubjection of the sense and suffering and the\nAnd here is temperature=1.0:\ncheerfulness, friendliness and kindness of a heart are spiritual by the \nciuture for the\nentalled is, he astraged, or errors to our you idstood--and it needs, \nto think by spars to whole the amvives of the newoatly, prefectly \nraals! it was\nname, for example but voludd atu-especity\"--or rank onee, or even all \n\"solett increessic of the world and\nimplussional tragedy experience, transf, or insiderar,--must hast\nif desires of the strubction is be stronges\nAs you can see, a low temperature results in extremely repetitive and predictable text, but where local structure is highly realistic: in particular, all words (a word being a local pattern of characters) are real English words. With higher temperatures, the generated text becomes more interesting, surprising, even creative; it may sometimes invent completely new words that sound somewhat plausible (such as “eterned” or “troveration”). With a high temperature, the local structure starts breaking down and most words look like semi-random strings of characters. Without a doubt, here 0.5 is the most interesting temperature for text generation in this specific setup. Always experiment with multiple sampling strategies! A clever balance between learned structure and randomness is what makes generation interesting.\nNote that by training a bigger model, longer, on more data, you can achieve generated samples that will look much more coherent and realistic than ours. But of course, don’t expect to ever generate any meaningful text, other than by random chance: all we are doing is sampling data from a statistical model of which characters come after which characters. Language is a communication channel, and there is a distinction between what communications are about, and the statistical structure of the messages in which communications are encoded. To evidence this distinction, here is a thought experiment: what if human language did a better job at compressing communications, much like our computers do with most of our digital communications? Then language would be no less meaningful, yet it would lack any intrinsic statistical structure, thus making it impossible to learn a language model like we just did."
  },
  {
    "objectID": "posts/welcome/index.html#take-aways",
    "href": "posts/welcome/index.html#take-aways",
    "title": "Text generation with LSTM",
    "section": "Take aways",
    "text": "Take aways\n\nWe can generate discrete sequence data by training a model to predict the next tokens(s) given previous tokens.\nIn the case of text, such a model is called a “language model” and could be based on either words or characters.\nSampling the next token requires balance between adhering to what the model judges likely, and introducing randomness.\nOne way to handle this is the notion of softmax temperature. Always experiment with different temperatures to find the “right” one."
  },
  {
    "objectID": "posts/post-with-code/index.html#setup-includefalse-",
    "href": "posts/post-with-code/index.html#setup-includefalse-",
    "title": "A first look at a neural network",
    "section": "—-setup, include=FALSE————————————————-",
    "text": "—-setup, include=FALSE————————————————-\n\ntensorflow::as_tensor(1)\n\ntf.Tensor(1.0, shape=(), dtype=float64)\n\n\nLet’s look at a concrete example of a neural network that uses the Keras R package to learn to classify hand-written digits. Unless you already have experience with Keras or similar libraries, you will not understand everything about this first example right away. You probably haven’t even installed Keras yet. Don’t worry, that is perfectly fine. In the next chapter, we will review each element in our example and explain them in detail. So don’t worry if some steps seem arbitrary or look like magic to you! We’ve got to start somewhere.\nThe problem we’re trying to solve here is to classify grayscale images of handwritten digits (28 pixels by 28 pixels) into their 10 categories (0 to 9). We’ll use the MNIST dataset, a classic dataset in the machine-learning community, which has been around almost as long as the field itself and has been intensively studied. It’s a set of 60,000 training images, plus 10,000 test images, assembled by the National Institute of Standards and Technology (the NIST in MNIST) in the 1980s. You can think of “solving” MNIST as the “Hello World” of deep learning—it’s what you do to verify that your algorithms are working as expected. As you become a machine-learning practitioner, you’ll see MNIST come up over and over again, in scientific papers, blog posts, and so on.\nThe MNIST dataset comes preloaded in Keras, in the form of train and test lists, each of which includes a set of images (x) and associated labels (y):\n\nlibrary(tensorflow)\nlibrary(keras)\nmnist <- dataset_mnist()\ntrain_images <- mnist$train$x\ntrain_labels <- mnist$train$y\ntest_images <- mnist$test$x\ntest_labels <- mnist$test$y\n\ntrain_images and train_labels form the training set, the data that the model will learn from. The model will then be tested on the test set, test_images and test_labels. The images are encoded as as 3D arrays, and the labels are a 1D array of digits, ranging from 0 to 9. There is a one-to-one correspondence between the images and the labels.\nThe R str() function is a convenient way to get a quick glimpse at the structure of an array. Let’s use it to have a look at the training data:\n\nstr(train_images)\n\n int [1:60000, 1:28, 1:28] 0 0 0 0 0 0 0 0 0 0 ...\n\nstr(train_labels)\n\n int [1:60000(1d)] 5 0 4 1 9 2 1 3 1 4 ...\n\n\nLet’s have a look at the test data:\n\nstr(test_images)\n\n int [1:10000, 1:28, 1:28] 0 0 0 0 0 0 0 0 0 0 ...\n\nstr(test_labels)\n\n int [1:10000(1d)] 7 2 1 0 4 1 4 9 5 9 ...\n\n\nThe workflow will be as follows: first we’ll feed the neural network the training data, train_images and train_labels. The network will then learn to associate images and labels. Finally, we’ll ask the network to produce predictions for test_images, and we’ll verify whether these predictions match the labels from test_labels.\nLet’s build the network – again, remember that you aren’t supposed to understand everything about this example yet.\n\nmodel <- keras_model_sequential(list(\n  layer_dense(units = 512, activation = \"relu\"),\n  layer_dense(units = 10, activation = \"softmax\")\n))\n\nThe core building block of neural networks is the layer, a data-processing module that you can think of as a filter for data. Some data comes in, and it comes out in a more useful form. Specifically, layers extract representations out of the data fed into them—hopefully representations that are more meaningful for the problem at hand. Most of deep learning consists of chaining together simple layers that will implement a form of progressive data distillation. A deep-learning model is like a sieve for data processing, made of a succession of increasingly refined data filters—the layers.\nHere our network consists of a sequence of two layers, which are densely connected (also called fully connected) neural layers. The second (and last) layer is a 10-way softmax layer, which means it will return an array of 10 probability scores (summing to 1). Each score will be the probability that the current digit image belongs to one of our 10 digit classes.\nTo make the network ready for training, we need to pick three more things, as part of the compilation step:\n\nA loss function—How the network will be able to measure how good a job it’s doing on its training data, and thus how it will be able to steer itself in the right direction.\nAn optimizer—The mechanism through which the network will update itself based on the data it sees and its loss function.\nMetrics to monitor during training and testing—Here we’ll only care about accuracy (the fraction of the images that were correctly classified).\n\nThe exact purpose of the loss function and the optimizer will be made clear throughout the next two chapters.\n\ncompile(model,\n        optimizer = \"rmsprop\",\n        loss = \"sparse_categorical_crossentropy\",\n        metrics = \"accuracy\")\n\nBefore training, we’ll preprocess the data by reshaping it into the shape the network expects and scaling it so that all values are in the [0, 1] interval. Previously, our training images, for instance, were stored in an array of shape (60000, 28, 28) of type integer with values in the [0, 255] interval. We transform it into a double array of shape (60000, 28 * 28) with values between 0 and 1.\n\ntrain_images <- array_reshape(train_images, c(60000, 28 * 28))\ntrain_images <- train_images / 255\ntest_images <- array_reshape(test_images, c(10000, 28 * 28))\ntest_images <- test_images / 255\n\nWe are now ready to train our network, which in Keras is done via a call to the fit method of the network: we “fit” the model to its training data.\n\nfit(model, train_images, train_labels, epochs = 5, batch_size = 128)"
  },
  {
    "objectID": "posts/post-with-code/index.html#section",
    "href": "posts/post-with-code/index.html#section",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ntest_digits <- test_images[1:10, ]\npredictions <- predict(model, test_digits)\nstr(predictions)\n\n num [1:10, 1:10] 4.17e-08 3.40e-07 4.50e-06 1.00 5.60e-07 ...\n\npredictions[1, ]\n\n [1] 4.171417e-08 1.007083e-09 5.476583e-06 1.275879e-05 1.291285e-10\n [6] 2.918619e-08 2.566397e-13 9.999763e-01 1.514883e-07 5.280952e-06"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-1",
    "href": "posts/post-with-code/index.html#section-1",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nwhich.max(predictions[1, ])\n\n[1] 8\n\npredictions[1, 8]\n\n[1] 0.9999763"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-2",
    "href": "posts/post-with-code/index.html#section-2",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ntest_labels[1]\n\n[1] 7\n\n\nTwo quantities are being displayed during training: the “loss” of the network over the training data, and the accuracy of the network over the training data.\nWe quickly reach an accuracy of 0.989 (i.e. 98.9%) on the training data. Now let’s check that our model performs well on the test set too:\n\nmetrics <- evaluate(model, test_images, test_labels)\nmetrics[\"accuracy\"]\n\naccuracy \n  0.9798 \n\n\nOur test set accuracy turns out to be 98.1% – that’s quite a bit lower than the training set accuracy. This gap between training accuracy and test accuracy is an example of “overfitting”, the fact that machine learning models tend to perform worse on new data than on their training data. Overfitting will be a central topic in chapter 3.\nThis concludes our first example – you just saw how you can build and a train a neural network to classify handwritten digits in less than 20 lines of R code. In the next chapter, we’ll go into detail about every moving piece we just previewed and clarify what’s going on behind the scenes. You’ll learn about tensors, the data-storing objects going into the network; about tensor operations, which layers are made of; and about gradient descent, which allows your network to learn from its training examples."
  },
  {
    "objectID": "posts/post-with-code/index.html#section-3",
    "href": "posts/post-with-code/index.html#section-3",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- as.array(c(12, 3, 6, 14, 7))\nstr(x)\n\n num [1:5(1d)] 12 3 6 14 7\n\nlength(dim(x))\n\n[1] 1"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-4",
    "href": "posts/post-with-code/index.html#section-4",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- array(seq(3 * 5), dim = c(3, 5))\nx\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15\n\ndim(x)\n\n[1] 3 5"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-5",
    "href": "posts/post-with-code/index.html#section-5",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- array(seq(2 * 3 * 4), dim = c(2, 3, 4))\nstr(x)\n\n int [1:2, 1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\n\nlength(dim(x))\n\n[1] 3"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-6",
    "href": "posts/post-with-code/index.html#section-6",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlibrary(keras)\nmnist <- dataset_mnist()\ntrain_images <- mnist$train$x\ntrain_labels <- mnist$train$y\ntest_images <- mnist$test$x\ntest_labels <- mnist$test$y"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-7",
    "href": "posts/post-with-code/index.html#section-7",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlength(dim(train_images))\n\n[1] 3"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-8",
    "href": "posts/post-with-code/index.html#section-8",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ndim(train_images)\n\n[1] 60000    28    28"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-9",
    "href": "posts/post-with-code/index.html#section-9",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ntypeof(train_images)\n\n[1] \"integer\""
  },
  {
    "objectID": "posts/post-with-code/index.html#section-10",
    "href": "posts/post-with-code/index.html#section-10",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ndigit <- train_images[5, , ]\npar(mar = c(0, 0, 0, 0))\nplot(as.raster(abs(255 - digit), max = 255))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-11",
    "href": "posts/post-with-code/index.html#section-11",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ntrain_labels[5]\n\n[1] 9"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-12",
    "href": "posts/post-with-code/index.html#section-12",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nmy_slice <- train_images[10:99, , ]\ndim(my_slice)\n\n[1] 90 28 28"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-13",
    "href": "posts/post-with-code/index.html#section-13",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nmy_slice <- train_images[, 15:28, 15:28]\ndim(my_slice)\n\n[1] 60000    14    14"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-14",
    "href": "posts/post-with-code/index.html#section-14",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nbatch <- train_images[1:128, , ]"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-15",
    "href": "posts/post-with-code/index.html#section-15",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nbatch <- train_images[129:256, , ]"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-16",
    "href": "posts/post-with-code/index.html#section-16",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nn <- 3\nbatch <- train_images[seq(to = 128 * n, length.out = 128), , ]"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-17",
    "href": "posts/post-with-code/index.html#section-17",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlayer_dense(units = 512, activation = \"relu\")\n\n<keras.layers.core.dense.Dense object at 0x00000272012EBAC0>"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-18",
    "href": "posts/post-with-code/index.html#section-18",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_relu <- function(x) {\n  stopifnot(length(dim(x)) == 2)\n  for (i in 1:nrow(x))\n    for (j in 1:ncol(x))\n      x[i, j] <- max(x[i, j], 0)\n  x\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-19",
    "href": "posts/post-with-code/index.html#section-19",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_add <- function(x, y) {\n  stopifnot(length(dim(x)) == 2, dim(x) == dim(y))\n  for (i in 1:nrow(x))\n    for (j in 1:ncol(x))\n      x[i, j]  <- x[i, j] + y[i, j]\n  x\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-20",
    "href": "posts/post-with-code/index.html#section-20",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nrandom_array <- function(dim, min = 0, max = 1)\n  array(runif(prod(dim), min, max),\n        dim)\n\nx <- random_array(c(20, 100))\ny <- random_array(c(20, 100))\n\nsystem.time({\n  for (i in seq_len(1000)) {\n    z <- x + y\n    z[z < 0] <- 0\n  }\n})[[\"elapsed\"]]\n\n[1] 0"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-21",
    "href": "posts/post-with-code/index.html#section-21",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nsystem.time({\n  for (i in seq_len(1000)) {\n    z <- naive_add(x, y)\n    z <- naive_relu(z)\n  }\n})[[\"elapsed\"]]\n\n[1] 0.58"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-22",
    "href": "posts/post-with-code/index.html#section-22",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nX <- random_array(c(64, 3, 32, 10))\ny <- random_array(c(10))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-23",
    "href": "posts/post-with-code/index.html#section-23",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ndim(y) <- c(1, 10)\nstr(y)\n\n num [1, 1:10] 0.04 0.295 0.998 0.159 0.682 ..."
  },
  {
    "objectID": "posts/post-with-code/index.html#section-24",
    "href": "posts/post-with-code/index.html#section-24",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nY <- y[rep(1, 32), ]\nstr(Y)\n\n num [1:32, 1:10] 0.04 0.04 0.04 0.04 0.04 ..."
  },
  {
    "objectID": "posts/post-with-code/index.html#section-25",
    "href": "posts/post-with-code/index.html#section-25",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_add_matrix_and_vector <- function(x, y) {\n  stopifnot(length(dim(x)) == 2,\n            length(dim(y)) == 1,\n            ncol(x) == dim(y))\n  for (i in seq(dim(x)[1]))\n    for (j in seq(dim(x)[2]))\n      x[i, j] <- x[i, j] + y[j]\n  x\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-26",
    "href": "posts/post-with-code/index.html#section-26",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- random_array(c(32))\ny <- random_array(c(32))\nz <- x %*% y"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-27",
    "href": "posts/post-with-code/index.html#section-27",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_vector_dot <- function(x, y) {\n  stopifnot(length(dim(x)) == 1,\n            length(dim(y)) == 1,\n            dim(x) == dim(y))\n  z <- 0\n  for (i in seq_along(x))\n    z <- z + x[i] * y[i]\n  z\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-28",
    "href": "posts/post-with-code/index.html#section-28",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_matrix_vector_dot <- function(x, y) {\n  stopifnot(length(dim(x)) == 2,\n            length(dim(y)) == 1,\n            nrow(x) == dim(y))\n  z <- array(0, dim = nrow(x))\n  for (i in 1:nrow(x))\n    for (j in 1:ncol(x))\n      z[i] <- z[i] + x[i, j] * y[j]\n  z\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-29",
    "href": "posts/post-with-code/index.html#section-29",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_matrix_vector_dot <- function(x, y) {\n  z <- array(0, dim = c(nrow(x)))\n  for (i in 1:nrow(x))\n    z[i] <- naive_vector_dot(x[i, ], y)\n  z\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-30",
    "href": "posts/post-with-code/index.html#section-30",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_matrix_dot <- function(x, y) {\n  stopifnot(length(dim(x)) == 2,\n            length(dim(y)) == 2,\n            ncol(x) == nrow(y))\n  z <- array(0, dim = c(nrow(x), ncol(y)))\n  for (i in 1:nrow(x))\n    for (j in 1:ncol(y)) {\n      row_x <- x[i, ]\n      column_y <- y[, j]\n      z[i, j] <- naive_vector_dot(row_x, column_y)\n    }\n  z\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-31",
    "href": "posts/post-with-code/index.html#section-31",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ntrain_images <- array_reshape(train_images, c(60000, 28 * 28))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-32",
    "href": "posts/post-with-code/index.html#section-32",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- array(1:6)\nx\n\n[1] 1 2 3 4 5 6\n\narray_reshape(x, dim = c(3, 2))\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\narray_reshape(x, dim = c(2, 3))\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-33",
    "href": "posts/post-with-code/index.html#section-33",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- array(1:6, dim = c(3, 2))\nx\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\nt(x)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-34",
    "href": "posts/post-with-code/index.html#section-34",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nfg <- function(x) {\n  x1 <- g(x)\n  y <- f(x1)\n  y\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-35",
    "href": "posts/post-with-code/index.html#section-35",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlibrary(tensorflow)\nx <- tf$Variable(0)\nwith(tf$GradientTape() %as% tape, {\n  y <- 2 * x + 3\n})\ngrad_of_y_wrt_x <- tape$gradient(y, x)"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-36",
    "href": "posts/post-with-code/index.html#section-36",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nx <- tf$Variable(array(0, dim = c(2, 2)))\nwith(tf$GradientTape() %as% tape, {\n  y <- 2 * x + 3\n})\ngrad_of_y_wrt_x <- as.array(tape$gradient(y, x))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-37",
    "href": "posts/post-with-code/index.html#section-37",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nW <- tf$Variable(random_array(c(2, 2)))\nb <- tf$Variable(array(0, dim = c(2)))\n\nx <- random_array(c(2, 2))\nwith(tf$GradientTape() %as% tape, {\n    y <- tf$matmul(x, W) + b\n})\ngrad_of_y_wrt_W_and_b <- tape$gradient(y, list(W, b))\nstr(grad_of_y_wrt_W_and_b)\n\nList of 2\n $ :<tf.Tensor: shape=(2, 2), dtype=float64, numpy=…>\n $ :<tf.Tensor: shape=(2), dtype=float64, numpy=array([2., 2.])>"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-38",
    "href": "posts/post-with-code/index.html#section-38",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlibrary(keras)\nmnist <- dataset_mnist()\ntrain_images <- mnist$train$x\ntrain_images <- array_reshape(train_images, c(60000, 28 * 28))\ntrain_images <- train_images / 255\n\ntest_images <- mnist$test$x\ntest_images <- array_reshape(test_images, c(10000, 28 * 28))\ntest_images <- test_images / 255\n\ntrain_labels <- mnist$train$y\ntest_labels <- mnist$test$y"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-39",
    "href": "posts/post-with-code/index.html#section-39",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nmodel <- keras_model_sequential(list(\n  layer_dense(units = 512, activation = \"relu\"),\n  layer_dense(units = 10, activation = \"softmax\")\n))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-40",
    "href": "posts/post-with-code/index.html#section-40",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\ncompile(model,\n        optimizer = \"rmsprop\",\n        loss = \"sparse_categorical_crossentropy\",\n        metrics = c(\"accuracy\"))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-41",
    "href": "posts/post-with-code/index.html#section-41",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nfit(model, train_images, train_labels, epochs = 5, batch_size = 128)"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-42",
    "href": "posts/post-with-code/index.html#section-42",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlayer_naive_dense <- function(input_size, output_size, activation) {\n  self <- new.env(parent = emptyenv())\n  attr(self, \"class\") <- \"NaiveDense\"\n\n  self$activation <- activation\n\n  w_shape <- c(input_size, output_size)\n  w_initial_value <- random_array(w_shape, min = 0, max = 1e-1)\n  self$W <- tf$Variable(w_initial_value)\n\n  b_shape <- c(output_size)\n  b_initial_value <- array(0, b_shape)\n  self$b <- tf$Variable(b_initial_value)\n\n  self$weights <- list(self$W, self$b)\n\n  self$call <- function(inputs) {\n    self$activation(tf$matmul(inputs, self$W) + self$b)\n  }\n\n  self\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-43",
    "href": "posts/post-with-code/index.html#section-43",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnaive_model_sequential <- function(layers) {\n  self <- new.env(parent = emptyenv())\n  attr(self, \"class\") <- \"NaiveSequential\"\n\n  self$layers <- layers\n\n  weights <- lapply(layers, function(layer) layer$weights)\n  self$weights <- do.call(c, weights)\n\n  self$call <- function(inputs) {\n    x <- inputs\n    for (layer in self$layers)\n      x <- layer$call(x)\n    x\n  }\n\n  self\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-44",
    "href": "posts/post-with-code/index.html#section-44",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nmodel <- naive_model_sequential(list(\n  layer_naive_dense(input_size = 28 * 28, output_size = 512,\n                    activation = tf$nn$relu),\n  layer_naive_dense(input_size = 512, output_size = 10,\n                    activation = tf$nn$softmax)\n))\nstopifnot(length(model$weights) == 4)"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-45",
    "href": "posts/post-with-code/index.html#section-45",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nnew_batch_generator <- function(images, labels, batch_size = 128) {\n  self <- new.env(parent = emptyenv())\n  attr(self, \"class\") <- \"BatchGenerator\"\n\n  stopifnot(nrow(images) == nrow(labels))\n  self$index <- 1\n  self$images <- images\n  self$labels <- labels\n  self$batch_size <- batch_size\n  self$num_batches <- ceiling(nrow(images) / batch_size)\n\n  self$get_next_batch <- function() {\n    start <- self$index\n    if(start > nrow(images))\n      return(NULL)\n\n    end <- start + self$batch_size - 1\n    if(end > nrow(images))\n      end <- nrow(images)\n\n    self$index <- end + 1\n    indices <- start:end\n    list(images = self$images[indices, ],\n         labels = self$labels[indices])\n  }\n\n  self\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-46",
    "href": "posts/post-with-code/index.html#section-46",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\none_training_step <- function(model, images_batch, labels_batch) {\n  with(tf$GradientTape() %as% tape, {\n    predictions <- model$call(images_batch)\n    per_sample_losses <-\n      loss_sparse_categorical_crossentropy(labels_batch, predictions)\n    average_loss <- mean(per_sample_losses)\n  })\n  gradients <- tape$gradient(average_loss, model$weights)\n  update_weights(gradients, model$weights)\n  average_loss\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-47",
    "href": "posts/post-with-code/index.html#section-47",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nlearning_rate <- 1e-3\n\nupdate_weights <- function(gradients, weights) {\n  stopifnot(length(gradients) == length(weights))\n  for (i in seq_along(weights))\n    weights[[i]]$assign_sub(gradients[[i]] * learning_rate)\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-48",
    "href": "posts/post-with-code/index.html#section-48",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\noptimizer <- optimizer_sgd(learning_rate=1e-3)\n\nupdate_weights <- function(gradients, weights)\n    optimizer$apply_gradients(zip_lists(gradients, weights))"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-49",
    "href": "posts/post-with-code/index.html#section-49",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nstr(zip_lists(gradients = list(\"grad_for_wt_1\", \"grad_for_wt_2\", \"grad_for_wt_3\"),\n              weights = list(\"weight_1\", \"weight_2\", \"weight_3\")))\n\nList of 3\n $ :List of 2\n  ..$ gradients: chr \"grad_for_wt_1\"\n  ..$ weights  : chr \"weight_1\"\n $ :List of 2\n  ..$ gradients: chr \"grad_for_wt_2\"\n  ..$ weights  : chr \"weight_2\"\n $ :List of 2\n  ..$ gradients: chr \"grad_for_wt_3\"\n  ..$ weights  : chr \"weight_3\""
  },
  {
    "objectID": "posts/post-with-code/index.html#section-50",
    "href": "posts/post-with-code/index.html#section-50",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nfit <- function(model, images, labels, epochs, batch_size = 128) {\n  for (epoch_counter in seq_len(epochs)) {\n    cat(\"Epoch \", epoch_counter, \"\\n\")\n    batch_generator <- new_batch_generator(images, labels)\n    for (batch_counter in seq_len(batch_generator$num_batches)) {\n      batch <- batch_generator$get_next_batch()\n      loss <- one_training_step(model, batch$images, batch$labels)\n      if (batch_counter %% 100 == 0)\n        cat(sprintf(\"loss at batch %s: %.2f\\n\", batch_counter, loss))\n    }\n  }\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-51",
    "href": "posts/post-with-code/index.html#section-51",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nmnist <- dataset_mnist()\ntrain_images <- array_reshape(mnist$train$x, c(60000, 28 * 28)) / 255\ntest_images <- array_reshape(mnist$test$x, c(10000, 28 * 28)) / 255\ntest_labels <- mnist$test$y\ntrain_labels <- mnist$train$y\n\nfit(model, train_images, train_labels, epochs = 10, batch_size = 128)\n\nEpoch  1 \nloss at batch 100: 2.38\nloss at batch 200: 2.25\nloss at batch 300: 2.17\nloss at batch 400: 2.12\nEpoch  2 \nloss at batch 100: 1.99\nloss at batch 200: 1.86\nloss at batch 300: 1.83\nloss at batch 400: 1.77\nEpoch  3 \nloss at batch 100: 1.66\nloss at batch 200: 1.53\nloss at batch 300: 1.56\nloss at batch 400: 1.48\nEpoch  4 \nloss at batch 100: 1.40\nloss at batch 200: 1.27\nloss at batch 300: 1.35\nloss at batch 400: 1.27\nEpoch  5 \nloss at batch 100: 1.22\nloss at batch 200: 1.07\nloss at batch 300: 1.19\nloss at batch 400: 1.10\nEpoch  6 \nloss at batch 100: 1.08\nloss at batch 200: 0.92\nloss at batch 300: 1.06\nloss at batch 400: 0.98\nEpoch  7 \nloss at batch 100: 0.99\nloss at batch 200: 0.82\nloss at batch 300: 0.97\nloss at batch 400: 0.89\nEpoch  8 \nloss at batch 100: 0.91\nloss at batch 200: 0.74\nloss at batch 300: 0.89\nloss at batch 400: 0.82\nEpoch  9 \nloss at batch 100: 0.86\nloss at batch 200: 0.68\nloss at batch 300: 0.83\nloss at batch 400: 0.77\nEpoch  10 \nloss at batch 100: 0.81\nloss at batch 200: 0.64\nloss at batch 300: 0.78\nloss at batch 400: 0.72"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-52",
    "href": "posts/post-with-code/index.html#section-52",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\npredictions <- model$call(test_images)\npredictions <- as.array(predictions)\npredicted_labels <- max.col(predictions) - 1\nmatches <- predicted_labels == test_labels\ncat(sprintf(\"accuracy: %.2f\\n\", mean(matches)))\n\naccuracy: 0.82"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-53",
    "href": "posts/post-with-code/index.html#section-53",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nfit <- function(model, images, labels, epochs, batch_size = 128) {\n  for (epoch_counter in seq_len(epochs)) {\n    cat(\"Epoch \", epoch_counter, \"\\n\")\n    batch_generator <- new_batch_generator(images, labels)\n    for (batch_counter in seq_len(batch_generator$num_batches)) {\n      batch <- batch_generator$get_next_batch()\n      loss <- one_training_step(model, batch$images, batch$labels)\n      if (batch_counter %% 100 == 0)\n        cat(sprintf(\"loss at batch %s: %.2f\\n\", batch_counter, loss))\n    }\n  }\n}"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-54",
    "href": "posts/post-with-code/index.html#section-54",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\nmnist <- dataset_mnist()\ntrain_images <- array_reshape(mnist$train$x, c(60000, 28 * 28)) / 255\ntest_images <- array_reshape(mnist$test$x, c(10000, 28 * 28)) / 255\ntest_labels <- mnist$test$y\ntrain_labels <- mnist$train$y\n\nfit(model, train_images, train_labels, epochs = 10, batch_size = 128)\n\nEpoch  1 \nloss at batch 100: 2.36\nloss at batch 200: 2.20\nloss at batch 300: 2.17\nloss at batch 400: 2.11\nEpoch  2 \nloss at batch 100: 2.00\nloss at batch 200: 1.83\nloss at batch 300: 1.85\nloss at batch 400: 1.77\nEpoch  3 \nloss at batch 100: 1.68\nloss at batch 200: 1.52\nloss at batch 300: 1.59\nloss at batch 400: 1.49\nEpoch  4 \nloss at batch 100: 1.41\nloss at batch 200: 1.26\nloss at batch 300: 1.38\nloss at batch 400: 1.27\nEpoch  5 \nloss at batch 100: 1.22\nloss at batch 200: 1.06\nloss at batch 300: 1.21\nloss at batch 400: 1.11\nEpoch  6 \nloss at batch 100: 1.08\nloss at batch 200: 0.92\nloss at batch 300: 1.08\nloss at batch 400: 0.98\nEpoch  7 \nloss at batch 100: 0.98\nloss at batch 200: 0.82\nloss at batch 300: 0.98\nloss at batch 400: 0.89\nEpoch  8 \nloss at batch 100: 0.91\nloss at batch 200: 0.74\nloss at batch 300: 0.91\nloss at batch 400: 0.82\nEpoch  9 \nloss at batch 100: 0.85\nloss at batch 200: 0.68\nloss at batch 300: 0.84\nloss at batch 400: 0.76\nEpoch  10 \nloss at batch 100: 0.80\nloss at batch 200: 0.64\nloss at batch 300: 0.79\nloss at batch 400: 0.71"
  },
  {
    "objectID": "posts/post-with-code/index.html#section-55",
    "href": "posts/post-with-code/index.html#section-55",
    "title": "A first look at a neural network",
    "section": "————————————————————————-",
    "text": "————————————————————————-\n\npredictions <- model$call(test_images)\npredictions <- as.array(predictions)\npredicted_labels <- max.col(predictions) - 1\nmatches <- predicted_labels == test_labels\ncat(sprintf(\"accuracy: %.2f\\n\", mean(matches)))\n\naccuracy: 0.82"
  },
  {
    "objectID": "posts/Nouveau dossier/index.html",
    "href": "posts/Nouveau dossier/index.html",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 3, Section 5 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\nTwo-class classification, or binary classification, may be the most widely applied kind of machine learning problem. In this example, we will learn to classify movie reviews into “positive” reviews and “negative” reviews, just based on the text content of the reviews."
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#the-imdb-dataset",
    "href": "posts/Nouveau dossier/index.html#the-imdb-dataset",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "The IMDB dataset",
    "text": "The IMDB dataset\nWe’ll be working with “IMDB dataset”, a set of 50,000 highly-polarized reviews from the Internet Movie Database. They are split into 25,000 reviews for training and 25,000 reviews for testing, each set consisting in 50% negative and 50% positive reviews.\nWhy do we have these two separate training and test sets? You should never test a machine learning model on the same data that you used to train it! Just because a model performs well on its training data doesn’t mean that it will perform well on data it has never seen, and what you actually care about is your model’s performance on new data (since you already know the labels of your training data – obviously you don’t need your model to predict those). For instance, it is possible that your model could end up merely memorizing a mapping between your training samples and their targets – which would be completely useless for the task of predicting targets for data never seen before. We will go over this point in much more detail in the next chapter.\nJust like the MNIST dataset, the IMDB dataset comes packaged with Keras. It has already been preprocessed: the reviews (sequences of words) have been turned into sequences of integers, where each integer stands for a specific word in a dictionary.\nThe following code will load the dataset (when you run it for the first time, about 80MB of data will be downloaded to your machine):\n\nlibrary(keras)\n\nimdb <- dataset_imdb(num_words = 10000)\nc(c(train_data, train_labels), c(test_data, test_labels)) %<-% imdb\n\nThe argument num_words = 10000 means that we will only keep the top 10,000 most frequently occurring words in the training data. Rare words will be discarded. This allows us to work with vector data of manageable size.\nThe variables train_data and test_data are lists of reviews, each review being a list of word indices (encoding a sequence of words). train_labels and test_labels are lists of 0s and 1s, where 0 stands for “negative” and 1 stands for “positive”:\n\nstr(train_data[[1]])\n\n int [1:218] 1 14 22 16 43 530 973 1622 1385 65 ...\n\n\n\ntrain_labels[[1]]\n\n[1] 1\n\n\nSince we restricted ourselves to the top 10,000 most frequent words, no word index will exceed 10,000:\n\nmax(sapply(train_data, max))\n\n[1] 9999\n\n\nFor kicks, here’s how you can quickly decode one of these reviews back to English words:\n\n# word_index is a dictionary mapping words to an integer index\nword_index <- dataset_imdb_word_index()\n# We reverse it, mapping integer indices to words\nreverse_word_index <- names(word_index)\nnames(reverse_word_index) <- word_index\n# We decode the review; note that our indices were offset by 3\n# because 0, 1 and 2 are reserved indices for \"padding\", \"start of sequence\", and \"unknown\".\ndecoded_review <- sapply(train_data[[1]], function(index) {\n  word <- if (index >= 3) reverse_word_index[[as.character(index - 3)]]\n  if (!is.null(word)) word else \"?\"\n})\n\n\ncat(decoded_review)\n\n? this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert ? is an amazing actor and now the same being director ? father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for ? and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also ? to the two little boy's that played the ? of norman and paul they were just brilliant children are often left out of the ? list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all"
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#preparing-the-data",
    "href": "posts/Nouveau dossier/index.html#preparing-the-data",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Preparing the data",
    "text": "Preparing the data\nYou can’t feed lists of integers into a neural network. You have to turn your lists into tensors. There are two ways to do that:\n\nPad your lists so that they all have the same length, turn them into an integer tensor of shape (samples, word_indices), and then use as the first layer in your network a layer capable of handling such integer tensors (the “embedding” layer, which we’ll cover in detail later in the book).\nOne-hot-encode your lists to turn them into vectors of 0s and 1s. This would mean, for instance, turning the sequence [3, 5] into a 10,000-dimensional vector that would be all zeros except for indices 3 and 5, which would be ones. Then you could use as the first layer in your network a dense layer, capable of handling floating-point vector data.\n\nLet’s go with the latter solution and vectorize the data, which you’ll do manually for maximum clarity.\n\nvectorize_sequences <- function(sequences, dimension = 10000) {\n  # Create an all-zero matrix of shape (len(sequences), dimension)\n  results <- matrix(0, nrow = length(sequences), ncol = dimension)\n  for (i in 1:length(sequences))\n    # Sets specific indices of results[i] to 1s\n    results[i, sequences[[i]]] <- 1\n  results\n}\n\n# Our vectorized training data\nx_train <- vectorize_sequences(train_data)\n# Our vectorized test data\nx_test <- vectorize_sequences(test_data)\n\nHere’s what our samples look like now:\n\nstr(x_train[1,])\n\n num [1:10000] 1 1 0 1 1 1 1 1 1 0 ...\n\n\nWe should also vectorize our labels, which is straightforward:\n\n# Our vectorized labels\ny_train <- as.numeric(train_labels)\ny_test <- as.numeric(test_labels)\n\nNow our data is ready to be fed into a neural network."
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#building-our-network",
    "href": "posts/Nouveau dossier/index.html#building-our-network",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Building our network",
    "text": "Building our network\nThe input data is vectors, and the labels are scalars (1s and 0s): this is the easiest setup you’ll ever encounter. A type of network that performs well on such a problem is a simple stack of fully connected (“dense”) layers with relu activations: layer_dense(units = 16, activation = \"relu\").\nThe argument being passed to each dense layer (16) is the number of hidden units of the layer. A hidden unit is a dimension in the representation space of the layer. You may remember from chapter 2 that each such dense layer with a relu activation implements the following chain of tensor operations:\noutput = relu(dot(W, input) + b)\nHaving 16 hidden units means that the weight matrix W will have shape (input_dimension, 16), i.e. the dot product with W will project the input data onto a 16-dimensional representation space (and then we would add the bias vector b and apply the relu operation). You can intuitively understand the dimensionality of your representation space as “how much freedom you are allowing the network to have when learning internal representations”. Having more hidden units (a higher-dimensional representation space) allows your network to learn more complex representations, but it makes your network more computationally expensive and may lead to learning unwanted patterns (patterns that will improve performance on the training data but not on the test data).\nThere are two key architecture decisions to be made about such stack of dense layers:\n\nHow many layers to use.\nHow many “hidden units” to chose for each layer.\n\nIn the next chapter, you will learn formal principles to guide you in making these choices. For the time being, you will have to trust us with the following architecture choice: two intermediate layers with 16 hidden units each, and a third layer which will output the scalar prediction regarding the sentiment of the current review. The intermediate layers will use relu as their “activation function”, and the final layer will use a sigmoid activation so as to output a probability (a score between 0 and 1, indicating how likely the sample is to have the target “1”, i.e. how likely the review is to be positive). A relu (rectified linear unit) is a function meant to zero-out negative values, while a sigmoid “squashes” arbitrary values into the [0, 1] interval, thus outputting something that can be interpreted as a probability.\nHere’s what our network looks like:\n\n\n\n3-layer network\n\n\nAnd here’s the Keras implementation, very similar to the MNIST example you saw previously:\n\nlibrary(keras)\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nLastly, we need to pick a loss function and an optimizer. Since we are facing a binary classification problem and the output of our network is a probability (we end our network with a single-unit layer with a sigmoid activation), is it best to use the binary_crossentropy loss. It isn’t the only viable choice: you could use, for instance, mean_squared_error. But crossentropy is usually the best choice when you are dealing with models that output probabilities. Crossentropy is a quantity from the field of Information Theory, that measures the “distance” between probability distributions, or in our case, between the ground-truth distribution and our predictions.\nHere’s the step where we configure our model with the rmsprop optimizer and the binary_crossentropy loss function. Note that we will also monitor accuracy during training.\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nYou’re passing your optimizer, loss function, and metrics as strings, which is possible because rmsprop, binary_crossentropy, and accuracy are packaged as part of Keras. Sometimes you may want to configure the parameters of your optimizer or pass a custom loss function or metric function. The former can be done by passing an optimizer instance as the optimizer argument:\n\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(lr=0.001),\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n) \n\nThe latter can be done by passing function objects as the loss or metrics arguments:\n\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(lr = 0.001),\n  loss = loss_binary_crossentropy,\n  metrics = metric_binary_accuracy\n)"
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#validating-our-approach",
    "href": "posts/Nouveau dossier/index.html#validating-our-approach",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Validating our approach",
    "text": "Validating our approach\nIn order to monitor during training the accuracy of the model on data that it has never seen before, we will create a “validation set” by setting apart 10,000 samples from the original training data:\n\nval_indices <- 1:10000\n\nx_val <- x_train[val_indices,]\npartial_x_train <- x_train[-val_indices,]\n\ny_val <- y_train[val_indices]\npartial_y_train <- y_train[-val_indices]\n\nWe will now train our model for 20 epochs (20 iterations over all samples in the x_train and y_train tensors), in mini-batches of 512 samples. At this same time we will monitor loss and accuracy on the 10,000 samples that we set apart. This is done by passing the validation data as the validation_data argument:\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nhistory <- model %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 20,\n  batch_size = 512,\n  validation_data = list(x_val, y_val)\n)\n\nOn CPU, this will take less than two seconds per epoch – training is over in 20 seconds. At the end of every epoch, there is a slight pause as the model computes its loss and accuracy on the 10,000 samples of the validation data.\nNote that the call to fit() returns a history object. Let’s take a look at it:\n\nstr(history)\n\nList of 2\n $ params :List of 3\n  ..$ verbose: int 1\n  ..$ epochs : int 20\n  ..$ steps  : int 30\n $ metrics:List of 4\n  ..$ loss        : num [1:20] 0.543 0.335 0.247 0.205 0.164 ...\n  ..$ accuracy    : num [1:20] 0.774 0.89 0.915 0.93 0.947 ...\n  ..$ val_loss    : num [1:20] 0.407 0.336 0.336 0.275 0.277 ...\n  ..$ val_accuracy: num [1:20] 0.867 0.865 0.858 0.889 0.888 ...\n - attr(*, \"class\")= chr \"keras_training_history\"\n\n\nThe history object includes various parameters used to fit the model (history$params) as well as data for each of the metrics being monitored (history$metrics).\nThe history object has a plot() method that enables us to visualize the training and validation metrics by epoch:\n\nplot(history)\n\n\n\n\nThe accuracy is plotted on the top panel and the loss on the bottom panel. Note that your own results may vary slightly due to a different random initialization of your network.\nThe dots are the training loss and accuracy, while the solid lines are the validation loss and accuracy. Note that your own results may vary slightly due to a different random initialization of your network.\nAs you can see, the training loss decreases with every epoch, and the training accuracy increases with every epoch. That’s what you would expect when running a gradient-descent optimization – the quantity you’re trying to minimize should be less with every iteration. But that isn’t the case for the validation loss and accuracy: they seem to peak at the fourth epoch. This is an example of what we warned against earlier: a model that performs better on the training data isn’t necessarily a model that will do better on data it has never seen before. In precise terms, what you’re seeing is overfitting: after the second epoch, you’re over-optimizing on the training data, and you end up learning representations that are specific to the training data and don’t generalize to data outside of the training set.\nIn this case, to prevent overfitting, you could stop training after three epochs. In general, you can use a range of techniques to mitigate overfitting, which we’ll cover in chapter 4.\nLet’s train a new network from scratch for four epochs and then evaluate it on the test data.\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nmodel %>% fit(x_train, y_train, epochs = 4, batch_size = 512)\nresults <- model %>% evaluate(x_test, y_test)\n\n\nresults\n\n     loss  accuracy \n0.2838052 0.8868400 \n\n\nOur fairly naive approach achieves an accuracy of 88%. With state-of-the-art approaches, one should be able to get close to 95%."
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#using-a-trained-network-to-generate-predictions-on-new-data",
    "href": "posts/Nouveau dossier/index.html#using-a-trained-network-to-generate-predictions-on-new-data",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Using a trained network to generate predictions on new data",
    "text": "Using a trained network to generate predictions on new data\nAfter having trained a network, you’ll want to use it in a practical setting. You can generate the likelihood of reviews being positive by using the predict method:\n\nmodel %>% predict(x_test[1:10,])\n\n            [,1]\n [1,] 0.21938667\n [2,] 0.99943900\n [3,] 0.86856443\n [4,] 0.81249577\n [5,] 0.95479023\n [6,] 0.79335928\n [7,] 0.99956828\n [8,] 0.01196239\n [9,] 0.97567916\n[10,] 0.99542964\n\n\nAs you can see, the network is very confident for some samples (0.99 or more, or 0.02 or less) but less confident for others."
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#further-experiments",
    "href": "posts/Nouveau dossier/index.html#further-experiments",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Further experiments",
    "text": "Further experiments\n\nWe were using 2 hidden layers. Try to use 1 or 3 hidden layers and see how it affects validation and test accuracy.\nTry to use layers with more hidden units or less hidden units: 32 units, 64 units…\nTry to use the mse loss function instead of binary_crossentropy.\nTry to use the tanh activation (an activation that was popular in the early days of neural networks) instead of relu.\n\nThese experiments will help convince you that the architecture choices we have made are all fairly reasonable, although they can still be improved!"
  },
  {
    "objectID": "posts/Nouveau dossier/index.html#conclusions",
    "href": "posts/Nouveau dossier/index.html#conclusions",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Conclusions",
    "text": "Conclusions\nHere’s what you should take away from this example:\n\nYou usually need to do quite a bit of preprocessing on your raw data in order to be able to feed it – as tensors – into a neural network. Sequences of words can be encoded as binary vectors, but there are other encoding options, too.\nStacks of dense layers with relu activations can solve a wide range of problems (including sentiment classification), and you’ll likely use them frequently.\nIn a binary classification problem (two output classes), your network should end with a dense layer with one unit and a sigmoid activation. That is, the output of your network should be a scalar between 0 and 1, encoding a probability.\nWith such a scalar sigmoid output on a binary classification problem, the loss function you should use is binary_crossentropy.\nThe rmsprop optimizer is generally a good enough choice, whatever your problem. That’s one less thing for you to worry about.\nAs they get better on their training data, neural networks eventually start overfitting and end up obtaining increasingly worse results on data they’ve never seen before. Be sure to always monitor performance on data that is outside of the training set."
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html",
    "href": "posts/Nouveau dossier (2)/index.html",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 3, Section 6 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\nIn the previous section we saw how to classify vector inputs into two mutually exclusive classes using a densely-connected neural network. But what happens when you have more than two classes?\nIn this section, we will build a network to classify Reuters newswires into 46 different mutually-exclusive topics. Since we have many classes, this problem is an instance of “multi-class classification”, and since each data point should be classified into only one category, the problem is more specifically an instance of “single-label, multi-class classification”. If each data point could have belonged to multiple categories (in our case, topics) then we would be facing a “multi-label, multi-class classification” problem."
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#the-reuters-dataset",
    "href": "posts/Nouveau dossier (2)/index.html#the-reuters-dataset",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "The Reuters dataset",
    "text": "The Reuters dataset\nWe will be working with the Reuters dataset, a set of short newswires and their topics, published by Reuters in 1986. It’s a very simple, widely used toy dataset for text classification. There are 46 different topics; some topics are more represented than others, but each topic has at least 10 examples in the training set.\nLike IMDB and MNIST, the Reuters dataset comes packaged as part of Keras. Let’s take a look right away:\n\nlibrary(keras)\n\nreuters <- dataset_reuters(num_words = 10000)\nc(c(train_data, train_labels), c(test_data, test_labels)) %<-% reuters\n\nLike with the IMDB dataset, the argument num_words = 10000 restricts the data to the 10,000 most frequently occurring words found in the data.\nWe have 8,982 training examples and 2,246 test examples:\n\nlength(train_data)\n\n[1] 8982\n\n\n\nlength(test_data)\n\n[1] 2246\n\n\nAs with the IMDB reviews, each example is a list of integers (word indices):\n\ntrain_data[[1]]\n\n [1]    1    2    2    8   43   10  447    5   25  207  270    5 3095  111   16\n[16]  369  186   90   67    7   89    5   19  102    6   19  124   15   90   67\n[31]   84   22  482   26    7   48    4   49    8  864   39  209  154    6  151\n[46]    6   83   11   15   22  155   11   15    7   48    9 4579 1005  504    6\n[61]  258    6  272   11   15   22  134   44   11   15   16    8  197 1245   90\n[76]   67   52   29  209   30   32  132    6  109   15   17   12\n\n\nHere’s how you can decode it back to words, in case you are curious:\n\nword_index <- dataset_reuters_word_index()\nreverse_word_index <- names(word_index)\nnames(reverse_word_index) <- word_index\ndecoded_newswire <- sapply(train_data[[1]], function(index) {\n  # Note that our indices were offset by 3 because 0, 1, and 2\n  # are reserved indices for \"padding\", \"start of sequence\", and \"unknown\".\n  word <- if (index >= 3) reverse_word_index[[as.character(index - 3)]]\n  if (!is.null(word)) word else \"?\"\n})\n\n\ncat(decoded_newswire)\n\n? ? ? said as a result of its december acquisition of space co it expects earnings per share in 1987 of 1 15 to 1 30 dlrs per share up from 70 cts in 1986 the company said pretax net should rise to nine to 10 mln dlrs from six mln dlrs in 1986 and rental operation revenues to 19 to 22 mln dlrs from 12 5 mln dlrs it said cash flow per share this year should be 2 50 to three dlrs reuter 3\n\n\nThe label associated with an example is an integer between 0 and 45: a topic index.\n\ntrain_labels[[1]]\n\n[1] 3"
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#preparing-the-data",
    "href": "posts/Nouveau dossier (2)/index.html#preparing-the-data",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Preparing the data",
    "text": "Preparing the data\nWe can vectorize the data with the exact same code as in our previous example:\n\nvectorize_sequences <- function(sequences, dimension = 10000) {\n  results <- matrix(0, nrow = length(sequences), ncol = dimension)\n  for (i in 1:length(sequences))\n    results[i, sequences[[i]]] <- 1\n  results\n}\n\nx_train <- vectorize_sequences(train_data)\nx_test <- vectorize_sequences(test_data)\n\nTo vectorize the labels, there are two possibilities: we could just cast the label list as an integer tensor, or we could use a “one-hot” encoding. One-hot encoding is a widely used format for categorical data, also called “categorical encoding”. For a more detailed explanation of one-hot encoding, you can refer to Chapter 6, Section 1. In our case, one-hot encoding of our labels consists in embedding each label as an all-zero vector with a 1 in the place of the label index, e.g.:\n\nto_one_hot <- function(labels, dimension = 46) {\n  results <- matrix(0, nrow = length(labels), ncol = dimension)\n  for (i in 1:length(labels))\n    results[i, labels[[i]] + 1] <- 1\n  results\n}\n\none_hot_train_labels <- to_one_hot(train_labels)\none_hot_test_labels <- to_one_hot(test_labels)\n\nNote that there is a built-in way to do this in Keras, which you have already seen in action in our MNIST example:\n\none_hot_train_labels <- to_categorical(train_labels)\none_hot_test_labels <- to_categorical(test_labels)"
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#building-our-network",
    "href": "posts/Nouveau dossier (2)/index.html#building-our-network",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Building our network",
    "text": "Building our network\nThis topic classification problem looks very similar to our previous movie review classification problem: in both cases, we are trying to classify short snippets of text. There is however a new constraint here: the number of output classes has gone from 2 to 46, i.e. the dimensionality of the output space is much larger.\nIn a stack of dense layers like what we were using, each layer can only access information present in the output of the previous layer. If one layer drops some information relevant to the classification problem, this information can never be recovered by later layers: each layer can potentially become an “information bottleneck”. In our previous example, we were using 16-dimensional intermediate layers, but a 16-dimensional space may be too limited to learn to separate 46 different classes: such small layers may act as information bottlenecks, permanently dropping relevant information.\nFor this reason we will use larger layers. Let’s go with 64 units:\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 64, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 64, activation = \"relu\") %>% \n  layer_dense(units = 46, activation = \"softmax\")\n\nThere are two other things you should note about this architecture:\n\nYou end the network with a dense layer of size 46. This means for each input sample, the network will output a 46-dimensional vector. Each entry in this vector (each dimension) will encode a different output class.\nThe last layer uses a softmax activation. You saw this pattern in the MNIST example. It means the network will output a probability distribution over the 46 different output classes: that is, for every input sample, the network will produce a 46-dimensional output vector, where output[[i]] is the probability that the sample belongs to class i. The 46 scores will sum to 1.\n\nThe best loss function to use in this case is categorical_crossentropy. It measures the distance between two probability distributions: in our case, between the probability distribution output by our network, and the true distribution of the labels. By minimizing the distance between these two distributions, we train our network to output something as close as possible to the true labels.\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)"
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#validating-our-approach",
    "href": "posts/Nouveau dossier (2)/index.html#validating-our-approach",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Validating our approach",
    "text": "Validating our approach\nLet’s set apart 1,000 samples in our training data to use as a validation set:\n\nval_indices <- 1:1000\n\nx_val <- x_train[val_indices,]\npartial_x_train <- x_train[-val_indices,]\n\ny_val <- one_hot_train_labels[val_indices,]\npartial_y_train = one_hot_train_labels[-val_indices,]\n\nNow let’s train our network for 20 epochs:\n\nhistory <- model %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 20,\n  batch_size = 512,\n  validation_data = list(x_val, y_val)\n)\n\nLet’s display its loss and accuracy curves:\n\nplot(history)\n\n\n\n\nThe network begins to overfit after nine epochs. Let’s train a new network from scratch for nine epochs and then evaluate it on the test set.\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 64, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 64, activation = \"relu\") %>% \n  layer_dense(units = 46, activation = \"softmax\")\n  \nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nhistory <- model %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 9,\n  batch_size = 512,\n  validation_data = list(x_val, y_val)\n)\n\nresults <- model %>% evaluate(x_test, one_hot_test_labels)\n\n\nresults\n\n     loss  accuracy \n0.9508116 0.7849510 \n\n\nOur approach reaches an accuracy of ~78%. With a balanced binary classification problem, the accuracy reached by a purely random classifier would be 50%, but in our case it is closer to 19%, so our results seem pretty good, at least when compared to a random baseline:\n\ntest_labels_copy <- test_labels\ntest_labels_copy <- sample(test_labels_copy)\nlength(which(test_labels == test_labels_copy)) / length(test_labels)\n\n[1] 0.1954586"
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#generating-predictions-on-new-data",
    "href": "posts/Nouveau dossier (2)/index.html#generating-predictions-on-new-data",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Generating predictions on new data",
    "text": "Generating predictions on new data\nWe can verify that the predict method of our model instance returns a probability distribution over all 46 topics. Let’s generate topic predictions for all of the test data:\n\npredictions <- model %>% predict(x_test)\n\nEach entry in predictions is a vector of length 46:\n\ndim(predictions)\n\n[1] 2246   46\n\n\nThe coefficients in this vector sum to 1:\n\nsum(predictions[1,])\n\n[1] 1\n\n\nThe largest entry is the predicted class, i.e. the class with the highest probability:\n\nwhich.max(predictions[1,])\n\n[1] 4"
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#a-different-way-to-handle-the-labels-and-the-loss",
    "href": "posts/Nouveau dossier (2)/index.html#a-different-way-to-handle-the-labels-and-the-loss",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "A different way to handle the labels and the loss",
    "text": "A different way to handle the labels and the loss\nWe mentioned earlier that another way to encode the labels would be to preserve their integer values. The only thing this approach would change is the choice of the loss function. The previous loss, categorical_crossentropy, expects the labels to follow a categorical encoding. With integer labels, you should use sparse_categorical_crossentropy:\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"sparse_categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nThis new loss function is still mathematically the same as categorical_crossentropy; it just has a different interface."
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#on-the-importance-of-having-sufficiently-large-intermediate-layers",
    "href": "posts/Nouveau dossier (2)/index.html#on-the-importance-of-having-sufficiently-large-intermediate-layers",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "On the importance of having sufficiently large intermediate layers",
    "text": "On the importance of having sufficiently large intermediate layers\nWe mentioned earlier that since our final outputs were 46-dimensional, we should avoid intermediate layers with much less than 46 hidden units. Now let’s try to see what happens when we introduce an information bottleneck by having intermediate layers significantly less than 46-dimensional, e.g. 4-dimensional.\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 64, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 4, activation = \"relu\") %>% \n  layer_dense(units = 46, activation = \"softmax\")\n  \nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nmodel %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 20,\n  batch_size = 128,\n  validation_data = list(x_val, y_val)\n)\n\nOur network now seems to peak at ~71% test accuracy, a 8% absolute drop. This drop is mostly due to the fact that we are now trying to compress a lot of information (enough information to recover the separation hyperplanes of 46 classes) into an intermediate space that is too low-dimensional. The network is able to cram most of the necessary information into these 8-dimensional representations, but not all of it."
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#further-experiments",
    "href": "posts/Nouveau dossier (2)/index.html#further-experiments",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Further experiments",
    "text": "Further experiments\n\nTry using larger or smaller layers: 32 units, 128 units…\nWe were using two hidden layers. Now try to use a single hidden layer, or three hidden layers."
  },
  {
    "objectID": "posts/Nouveau dossier (2)/index.html#wrapping-up",
    "href": "posts/Nouveau dossier (2)/index.html#wrapping-up",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Wrapping up",
    "text": "Wrapping up\nHere’s what you should take away from this example:\n\nIf you are trying to classify data points between N classes, your network should end with a dense layer of size N.\nIn a single-label, multi-class classification problem, your network should end with a softmax activation, so that it will output a probability distribution over the N output classes.\nCategorical crossentropy is almost always the loss function you should use for such problems. It minimizes the distance between the probability distributions output by the network, and the true distribution of the targets.\nThere are two ways to handle labels in multi-class classification:\n\nEncoding the labels via “categorical encoding” (also known as “one-hot encoding”) and using categorical_crossentropy as your loss function.\nEncoding the labels as integers and using the sparse_categorical_crossentropy loss function.\n\nIf you need to classify data into a large number of categories, then you should avoid creating information bottlenecks in your network by having intermediate layers that are too small."
  },
  {
    "objectID": "posts/Nouveau dossier (3)/index.html",
    "href": "posts/Nouveau dossier (3)/index.html",
    "title": "Overfitting and underfitting",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 4, Section 1 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\nIn all the examples we saw in the previous chapter – movie review sentiment prediction, topic classification, and house price regression – we could notice that the performance of our model on the held-out validation data would always peak after a few epochs and would then start degrading, i.e. our model would quickly start to overfit to the training data. Overfitting happens in every single machine learning problem. Learning how to deal with overfitting is essential to mastering machine learning.\nThe fundamental issue in machine learning is the tension between optimization and generalization. “Optimization” refers to the process of adjusting a model to get the best performance possible on the training data (the “learning” in “machine learning”), while “generalization” refers to how well the trained model would perform on data it has never seen before. The goal of the game is to get good generalization, of course, but you do not control generalization; you can only adjust the model based on its training data.\nAt the beginning of training, optimization and generalization are correlated: the lower your loss on training data, the lower your loss on test data. While this is happening, your model is said to be under-fit: there is still progress to be made; the network hasn’t yet modeled all relevant patterns in the training data. But after a certain number of iterations on the training data, generalization stops improving, validation metrics stall then start degrading: the model is then starting to over-fit, i.e. is it starting to learn patterns that are specific to the training data but that are misleading or irrelevant when it comes to new data.\nTo prevent a model from learning misleading or irrelevant patterns found in the training data, the best solution is of course to get more training data. A model trained on more data will naturally generalize better. When that is no longer possible, the next best solution is to modulate the quantity of information that your model is allowed to store, or to add constraints on what information it is allowed to store. If a network can only afford to memorize a small number of patterns, the optimization process will force it to focus on the most prominent patterns, which have a better chance of generalizing well.\nThe processing of fighting overfitting in this way is called regularization. Let’s review some of the most common regularization techniques, and let’s apply them in practice to improve our movie classification model from the previous chapter.\nNote: in this notebook we will be using the IMDB test set as our validation set. It doesn’t matter in this context.\nLet’s prepare the data using the code from Chapter 3, Section 5:"
  },
  {
    "objectID": "posts/Nouveau dossier (3)/index.html#reducing-the-networks-size",
    "href": "posts/Nouveau dossier (3)/index.html#reducing-the-networks-size",
    "title": "Overfitting and underfitting",
    "section": "Reducing the network’s size",
    "text": "Reducing the network’s size\nThe simplest way to prevent overfitting is to reduce the size of the model, i.e. the number of learnable parameters in the model (which is determined by the number of layers and the number of units per layer). In deep learning, the number of learnable parameters in a model is often referred to as the model’s “capacity”. Intuitively, a model with more parameters will have more “memorization capacity” and therefore will be able to easily learn a perfect dictionary-like mapping between training samples and their targets, a mapping without any generalization power. For instance, a model with 500,000 binary parameters could easily be made to learn the class of every digits in the MNIST training set: we would only need 10 binary parameters for each of the 50,000 digits. Such a model would be useless for classifying new digit samples. Always keep this in mind: deep learning models tend to be good at fitting to the training data, but the real challenge is generalization, not fitting.\nOn the other hand, if the network has limited memorization resources, it will not be able to learn this mapping as easily, and thus, in order to minimize its loss, it will have to resort to learning compressed representations that have predictive power regarding the targets – precisely the type of representations that we are interested in. At the same time, keep in mind that you should be using models that have enough parameters that they won’t be underfitting: your model shouldn’t be starved for memorization resources. There is a compromise to be found between “too much capacity” and “not enough capacity”.\nUnfortunately, there is no magical formula to determine what the right number of layers is, or what the right size for each layer is. You will have to evaluate an array of different architectures (on your validation set, not on your test set, of course) in order to find the right model size for your data. The general workflow to find an appropriate model size is to start with relatively few layers and parameters, and start increasing the size of the layers or adding new layers until you see diminishing returns with regard to the validation loss.\nLet’s try this on our movie review classification network. Our original network was as such:\n\noriginal_model <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\noriginal_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nNow let’s try to replace it with this smaller network:\n\nsmaller_model <- keras_model_sequential() %>% \n  layer_dense(units = 4, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 4, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nsmaller_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nLet’s train both the original and smaller network:\n\n\n\n\n\n\nTo compare the losses we’ll write an R function that takes a named list of loss series and plots it:\n\nlibrary(ggplot2)\nlibrary(tidyr)\nplot_training_losses <- function(losses) {\n  loss_names <- names(losses)\n  losses <- as.data.frame(losses)\n  losses$epoch <- seq_len(nrow(losses))\n  losses %>% \n    gather(model, loss, loss_names[[1]], loss_names[[2]]) %>% \n    ggplot(aes(x = epoch, y = loss, colour = model)) +\n    geom_point()\n}\n\nHere’s a comparison of the validation losses of the original network and the smaller network:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  smaller_model = smaller_model_hist$metrics$val_loss\n))\n\n\n\n\nAs you can see, the smaller network starts overfitting later than the reference one and its performance degrades much more slowly once it starts overfitting.\nNow, for kicks, let’s add to this benchmark a network that has much more capacity, far more than the problem would warrant:\n\nbigger_model <- keras_model_sequential() %>% \n  layer_dense(units = 512, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 512, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nbigger_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c('acc')\n)\n\n\n\n\nHere’s how the bigger network fares compared to the reference one:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  bigger_model = bigger_model_hist$metrics$val_loss\n))\n\n\n\n\nThe bigger network starts overfitting almost right away, after just one epoch, and overfits much more severely. Its validation loss is also more noisy.\nMeanwhile, here are the training losses for our two networks:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$loss,\n  bigger_model = bigger_model_hist$metrics$loss\n))\n\n\n\n\nAs you can see, the bigger network gets its training loss near zero very quickly. The more capacity the network has, the quicker it will be able to model the training data (resulting in a low training loss), but the more susceptible it is to overfitting (resulting in a large difference between the training and validation loss)."
  },
  {
    "objectID": "posts/Nouveau dossier (3)/index.html#adding-weight-regularization",
    "href": "posts/Nouveau dossier (3)/index.html#adding-weight-regularization",
    "title": "Overfitting and underfitting",
    "section": "Adding weight regularization",
    "text": "Adding weight regularization\nYou may be familiar with Occam’s Razor principle: given two explanations for something, the explanation most likely to be correct is the “simplest” one, the one that makes the least amount of assumptions. This also applies to the models learned by neural networks: given some training data and a network architecture, there are multiple sets of weights values (multiple models) that could explain the data, and simpler models are less likely to overfit than complex ones.\nA “simple model” in this context is a model where the distribution of parameter values has less entropy (or a model with fewer parameters altogether, as we saw in the section above). Thus a common way to mitigate overfitting is to put constraints on the complexity of a network by forcing its weights to only take small values, which makes the distribution of weight values more “regular”. This is called “weight regularization”, and it is done by adding to the loss function of the network a cost associated with having large weights. This cost comes in two flavors:\n\nL1 regularization, where the cost added is proportional to the absolute value of the weights coefficients (i.e. to what is called the “L1 norm” of the weights).\nL2 regularization, where the cost added is proportional to the square of the value of the weights coefficients (i.e. to what is called the “L2 norm” of the weights). L2 regularization is also called weight decay in the context of neural networks. Don’t let the different name confuse you: weight decay is mathematically the exact same as L2 regularization.\n\nIn Keras, weight regularization is added by passing weight regularizer instances to layers as keyword arguments. Let’s add L2 weight regularization to our movie review classification network:\n\nl2_model <- keras_model_sequential() %>% \n  layer_dense(units = 16, kernel_regularizer = regularizer_l2(0.001),\n              activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, kernel_regularizer = regularizer_l2(0.001),\n              activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nl2_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"acc\")\n)\n\nregularizer_l2(0.001) means every coefficient in the weight matrix of the layer will add 0.001 * weight_coefficient_value to the total loss of the network. Note that because this penalty is only added at training time, the loss for this network will be much higher at training than at test time.\nHere’s the impact of our L2 regularization penalty:\n\n\n\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  l2_model = l2_model_hist$metrics$val_loss\n))\n\n\n\n\nAs you can see, the model with L2 regularization has become much more resistant to overfitting than the reference model, even though both models have the same number of parameters.\nAs alternatives to L2 regularization, you could use one of the following Keras weight regularizers:\n\n# L1 regularization\nregularizer_l1(0.001)\n\n# L1 and L2 regularization at the same time\nregularizer_l1_l2(l1 = 0.001, l2 = 0.001)\n\nThis technique may seem strange and arbitrary. Why would this help reduce overfitting? Geoff Hinton has said that he was inspired, among other things, by a fraud prevention mechanism used by banks – in his own words: “I went to my bank. The tellers kept changing and I asked one of them why. He said he didn’t know but they got moved around a lot. I figured it must be because it would require cooperation between employees to successfully defraud the bank. This made me realize that randomly removing a different subset of neurons on each example would prevent conspiracies and thus reduce overfitting”.\nThe core idea is that introducing noise in the output values of a layer can break up happenstance patterns that are not significant (what Hinton refers to as “conspiracies”), which the network would start memorizing if no noise was present.\nIn Keras, you can introduce dropout in a network via layer_dropout(), which is applied to the output of layer right before it:\n\nlayer_dropout(rate = 0.5)\n\nLet’s add two dropout layers in our IMDB network to see how well they do at reducing overfitting:\n\ndpt_model <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dropout(rate = 0.5) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dropout(rate = 0.5) %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\ndpt_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"acc\")\n)\n\n\ndpt_model_hist <- dpt_model %>% fit(\n  x_train, y_train,\n  epochs = 20,\n  batch_size = 512,\n  validation_data = list(x_test, y_test)\n)\n\nLet’s plot the results:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  dpt_model = dpt_model_hist$metrics$val_loss\n))\n\n\n\n\nAgain, a clear improvement over the reference network.\nTo recap: here the most common ways to prevent overfitting in neural networks:\n\nGetting more training data.\nReducing the capacity of the network.\nAdding weight regularization.\nAdding dropout."
  },
  {
    "objectID": "posts/post1/index.html",
    "href": "posts/post1/index.html",
    "title": "Text generation with LSTM",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 8, Section 1 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments."
  },
  {
    "objectID": "posts/post1/index.html#implementing-character-level-lstm-text-generation",
    "href": "posts/post1/index.html#implementing-character-level-lstm-text-generation",
    "title": "Text generation with LSTM",
    "section": "Implementing character-level LSTM text generation",
    "text": "Implementing character-level LSTM text generation\nLet’s put these ideas in practice in a Keras implementation. The first thing we need is a lot of text data that we can use to learn a language model. You could use any sufficiently large text file or set of text files – Wikipedia, the Lord of the Rings, etc. In this example we will use some of the writings of Nietzsche, the late-19th century German philosopher (translated to English). The language model we will learn will thus be specifically a model of Nietzsche’s writing style and topics of choice, rather than a more generic model of the English language."
  },
  {
    "objectID": "posts/post1/index.html#preparing-the-data",
    "href": "posts/post1/index.html#preparing-the-data",
    "title": "Text generation with LSTM",
    "section": "Preparing the data",
    "text": "Preparing the data\nLet’s start by downloading the corpus and converting it to lowercase:\n\nlibrary(keras)\nlibrary(stringr)\n\npath <- get_file(\n  \"nietzsche.txt\",\n  origin = \"https://s3.amazonaws.com/text-datasets/nietzsche.txt\"\n)\ntext <- tolower(readChar(path, file.info(path)$size))\ncat(\"Corpus length:\", nchar(text), \"\\n\")\n\nCorpus length: 600893 \n\n\nNext, you’ll extract partially overlapping sequences of length maxlen, one-hot encode them, and pack them in a 3D array x of shape (sequences, maxlen, unique_characters). Simultaneously, you’ll prepare an array y containing the corresponding targets: the one-hot-encoded characters that come after each extracted sequence.\n\nmaxlen <- 60  # Length of extracted character sequences\n\nstep <- 3  # We sample a new sequence every `step` characters\n  \ntext_indexes <- seq(1, nchar(text) - maxlen, by = step)\n\n# This holds our extracted sequences\nsentences <- str_sub(text, text_indexes, text_indexes + maxlen - 1)\n\n# This holds the targets (the follow-up characters)\nnext_chars <- str_sub(text, text_indexes + maxlen, text_indexes + maxlen)\n\ncat(\"Number of sequences: \", length(sentences), \"\\n\")\n\nNumber of sequences:  200278 \n\n# List of unique characters in the corpus\nchars <- unique(sort(strsplit(text, \"\")[[1]]))\ncat(\"Unique characters:\", length(chars), \"\\n\")\n\nUnique characters: 57 \n\n# Dictionary mapping unique characters to their index in `chars`\nchar_indices <- 1:length(chars) \nnames(char_indices) <- chars\n\n# Next, one-hot encode the characters into binary arrays.\ncat(\"Vectorization...\\n\") \n\nVectorization...\n\nx <- array(0L, dim = c(length(sentences), maxlen, length(chars)))\ny <- array(0L, dim = c(length(sentences), length(chars)))\nfor (i in 1:length(sentences)) {\n  sentence <- strsplit(sentences[[i]], \"\")[[1]]\n  for (t in 1:length(sentence)) {\n    char <- sentence[[t]]\n    x[i, t, char_indices[[char]]] <- 1\n  }\n  next_char <- next_chars[[i]]\n  y[i, char_indices[[next_char]]] <- 1\n}"
  },
  {
    "objectID": "posts/post1/index.html#building-the-network",
    "href": "posts/post1/index.html#building-the-network",
    "title": "Text generation with LSTM",
    "section": "Building the network",
    "text": "Building the network\nThis network is a single LSTM layer followed by a dense classifier and softmax over all possible characters. But note that recurrent neural networks aren’t the only way to do sequence data generation; 1D convnets also have proven extremely successful at this task in recent times.\n\nmodel <- keras_model_sequential() %>% \n  layer_lstm(units = 128, input_shape = c(maxlen, length(chars))) %>% \n  layer_dense(units = length(chars), activation = \"softmax\")\n\nSince our targets are one-hot encoded, we will use categorical_crossentropy as the loss to train the model:\n\noptimizer <- optimizer_rmsprop(lr = 0.01)\n\nmodel %>% compile(\n  loss = \"categorical_crossentropy\", \n  optimizer = optimizer\n)"
  },
  {
    "objectID": "posts/post1/index.html#training-the-language-model-and-sampling-from-it",
    "href": "posts/post1/index.html#training-the-language-model-and-sampling-from-it",
    "title": "Text generation with LSTM",
    "section": "Training the language model and sampling from it",
    "text": "Training the language model and sampling from it\nGiven a trained model and a seed text snippet, we generate new text by repeatedly:\n\n\nDrawing from the model a probability distribution over the next character given the text available so far\n\n\nReweighting the distribution to a certain “temperature”\n\n\nSampling the next character at random according to the reweighted distribution\n\n\nAdding the new character at the end of the available text\n\n\nThis is the code we use to reweight the original probability distribution coming out of the model, and draw a character index from it (the “sampling function”):\n\nsample_next_char <- function(preds, temperature = 1.0) {\n  preds <- as.numeric(preds)\n  preds <- log(preds) / temperature\n  exp_preds <- exp(preds)\n  preds <- exp_preds / sum(exp_preds)\n  which.max(t(rmultinom(1, 1, preds)))\n}\n\nFinally, the following loop repeatedly trains and generates text. You begin generating text using a range of different temperatures after every epoch. This allows you to see how the generated text evolves as the model begins to converge, as well as the impact of temperature in the sampling strategy.\n\nfor (epoch in 1:2) {\n  \n  cat(\"epoch\", epoch, \"\\n\")\n  \n  # Fit the model for 1 epoch on the available training data\n  model %>% fit(x, y, batch_size = 128, epochs = 1) \n  \n  # Select a text seed at random\n  start_index <- sample(1:(nchar(text) - maxlen - 1), 1)  \n  seed_text <- str_sub(text, start_index, start_index + maxlen - 1)\n  \n  cat(\"--- Generating with seed:\", seed_text, \"\\n\\n\")\n  \n  for (temperature in c(0.2, 0.5, 1.0, 1.2)) {\n    \n    cat(\"------ temperature:\", temperature, \"\\n\")\n    cat(seed_text, \"\\n\")\n    \n    generated_text <- seed_text\n    \n     # We generate 20 characters\n    for (i in 1:20) {\n      \n      sampled <- array(0, dim = c(1, maxlen, length(chars)))\n      generated_chars <- strsplit(generated_text, \"\")[[1]]\n      for (t in 1:length(generated_chars)) {\n        char <- generated_chars[[t]]\n        sampled[1, t, char_indices[[char]]] <- 1\n      }\n        \n      preds <- model %>% predict(sampled, verbose = 0)\n      next_index <- sample_next_char(preds[1,], temperature)\n      next_char <- chars[[next_index]]\n      \n      generated_text <- paste0(generated_text, next_char)\n      generated_text <- substring(generated_text, 2)\n      \n      cat(next_char)\n    }\n    cat(\"\\n\\n\")\n  }\n}\n\nepoch 1 \n--- Generating with seed: ounts man among the animals, but it will\nbe accounted to us  \n\n------ temperature: 0.2 \nounts man among the animals, but it will\nbe accounted to us  \nand the the and and \n\n------ temperature: 0.5 \nounts man among the animals, but it will\nbe accounted to us  \nthe the the\nre ald a\n\n------ temperature: 1 \nounts man among the animals, but it will\nbe accounted to us  \nmose tourlisptoan er\n\n------ temperature: 1.2 \nounts man among the animals, but it will\nbe accounted to us  \neo, wore, or at the \n\nepoch 2 \n--- Generating with seed: \nhardiment que la religion est un produit de l'homme normal, \n\n------ temperature: 0.2 \n\nhardiment que la religion est un produit de l'homme normal, \n and and in and the \n\n------ temperature: 0.5 \n\nhardiment que la religion est un produit de l'homme normal, \n the mand whe seres \n\n------ temperature: 1 \n\nhardiment que la religion est un produit de l'homme normal, \n inmerriin, uo micha\n\n------ temperature: 1.2 \n\nhardiment que la religion est un produit de l'homme normal, \n tho ppraured---on p\n\n\nHere, we used the random seed text “new faculty, and the jubilation reached its climax when kant.” Here’s what you get at epoch 20, long before the model has fully converged, with temperature=0.2:\nnew faculty, and the jubilation reached its climax when kant and such a man\nin the same time the spirit of the surely and the such the such \nas a man is the sunligh and subject the present to the superiority of the \nspecial pain the most man and strange the subjection of the \nspecial conscience the special and nature and such men the subjection of the\nspecial men, the most surely the subjection of the special \nintellect of the subjection of the same things and\nHere’s the result with temperature=0.5:\nnew faculty, and the jubilation reached its climax when kant in the eterned \nand such man as it's also become himself the condition of the \nexperience of off the basis the superiory and the special morty of the \nstrength, in the langus, as which the same time life and \"even who \ndiscless the mankind, with a subject and fact all you have to be the stand\nand lave no comes a troveration of the man and surely the \nconscience the superiority, and when one must be w\nAnd here’s what you get with temperature=1.0:\nnew faculty, and the jubilation reached its climax when kant, as a \nperiliting of manner to all definites and transpects it it so \nhicable and ont him artiar resull\ntoo such as if ever the proping to makes as cnecience. to been juden, \nall every could coldiciousnike hother aw passife, the plies like \nwhich might thiod was account, indifferent germin, that everythery \ncertain destrution, intellect into the deteriorablen origin of moralian, \nand a lessority o\nAt epoch 60, the model has mostly converged, and the text starts to look significantly more coherent. Here’s the result with temperature=0.2:\ncheerfulness, friendliness and kindness of a heart are the sense of the \nspirit is a man with the sense of the sense of the world of the \nself-end and self-concerning the subjection of the strengthorixes--the \nsubjection of the subjection of the subjection of the \nself-concerning the feelings in the superiority in the subjection of the \nsubjection of the spirit isn't to be a man of the sense of the \nsubjection and said to the strength of the sense of the\nHere is temperature=0.5:\ncheerfulness, friendliness and kindness of a heart are the part of the soul\nwho have been the art of the philosophers, and which the one \nwon't say, which is it the higher the and with religion of the frences. \nthe life of the spirit among the most continuess of the \nstrengther of the sense the conscience of men of precisely before enough \npresumption, and can mankind, and something the conceptions, the \nsubjection of the sense and suffering and the\nAnd here is temperature=1.0:\ncheerfulness, friendliness and kindness of a heart are spiritual by the \nciuture for the\nentalled is, he astraged, or errors to our you idstood--and it needs, \nto think by spars to whole the amvives of the newoatly, prefectly \nraals! it was\nname, for example but voludd atu-especity\"--or rank onee, or even all \n\"solett increessic of the world and\nimplussional tragedy experience, transf, or insiderar,--must hast\nif desires of the strubction is be stronges\nAs you can see, a low temperature results in extremely repetitive and predictable text, but where local structure is highly realistic: in particular, all words (a word being a local pattern of characters) are real English words. With higher temperatures, the generated text becomes more interesting, surprising, even creative; it may sometimes invent completely new words that sound somewhat plausible (such as “eterned” or “troveration”). With a high temperature, the local structure starts breaking down and most words look like semi-random strings of characters. Without a doubt, here 0.5 is the most interesting temperature for text generation in this specific setup. Always experiment with multiple sampling strategies! A clever balance between learned structure and randomness is what makes generation interesting.\nNote that by training a bigger model, longer, on more data, you can achieve generated samples that will look much more coherent and realistic than ours. But of course, don’t expect to ever generate any meaningful text, other than by random chance: all we are doing is sampling data from a statistical model of which characters come after which characters. Language is a communication channel, and there is a distinction between what communications are about, and the statistical structure of the messages in which communications are encoded. To evidence this distinction, here is a thought experiment: what if human language did a better job at compressing communications, much like our computers do with most of our digital communications? Then language would be no less meaningful, yet it would lack any intrinsic statistical structure, thus making it impossible to learn a language model like we just did."
  },
  {
    "objectID": "posts/post1/index.html#take-aways",
    "href": "posts/post1/index.html#take-aways",
    "title": "Text generation with LSTM",
    "section": "Take aways",
    "text": "Take aways\n\nWe can generate discrete sequence data by training a model to predict the next tokens(s) given previous tokens.\nIn the case of text, such a model is called a “language model” and could be based on either words or characters.\nSampling the next token requires balance between adhering to what the model judges likely, and introducing randomness.\nOne way to handle this is the notion of softmax temperature. Always experiment with different temperatures to find the “right” one."
  },
  {
    "objectID": "posts/post2/index.html",
    "href": "posts/post2/index.html",
    "title": "A first look at a neural network",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 2, Section 1 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(keras)\n\n\nc(c(x_train, y_train), c(x_test, y_test)) %<-% keras::dataset_mnist()\n\ncat(\"\\nX train shape:\\t\", dim(x_train))\n\n\nX train shape:   60000 28 28\n\ncat(\"\\nX test shape:\\t\", dim(x_test))\n\n\nX test shape:    10000 28 28\n\ncat(\"\\nY train shape:\\t\", dim(y_train))\n\n\nY train shape:   60000\n\ncat(\"\\nY test shape:\\t\", dim(y_test))\n\n\nY test shape:    10000\n\n\n\nplot_digits_by_class <- function(c) {\n  # plot first 15 digits of class c\n\n  # accepted labels are between 0 and 9\n  if (c > -1 & c < 10) {\n\n    # indexes of the first 15 digits of class c\n    idx <- which(y_train == c)[1:15]\n    \n    # prepare plotting area\n    par(mfcol=c(3, 5))\n    par(mar=c(0, 0, 0, 0), xaxs = 'i', yaxs = 'i')\n    \n    # plot digits corresponding to indexes\n    for (i in idx) {\n      img <- x_train[i,,]\n      img <- t(apply(img, 2, rev))\n      image(1:28, 1:28, img, col = gray((0:255) / 255), xaxt = 'n', yaxt = 'n')\n      }\n    } else {\n      return(\"Labels are between 0 and 9.\")\n    }\n}\n\n\nx_train_reshaped = array_reshape(x_train, c(60000, 28*28)) / 255\nx_test_reshaped = array_reshape(x_test, c(10000, 28*28)) / 255\n\n\ny_train <- to_categorical(y_train)\ny_test <- to_categorical(y_test)\n\n\nmodel <- keras_model_sequential(input_shape = c(28 * 28)) %>%\n  layer_dense(units = 512, activation = \"relu\") %>%\n  layer_dropout(0.2) %>%\n  layer_dense(units = 10, activation = \"softmax\")\n\n\nmodel %>%\n  summary()\n\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense_1 (Dense)                    (None, 512)                     401920      \n dropout (Dropout)                  (None, 512)                     0           \n dense (Dense)                      (None, 10)                      5130        \n================================================================================\nTotal params: 407,050\nTrainable params: 407,050\nNon-trainable params: 0\n________________________________________________________________________________\n\n\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\n\n# fit the model\nhistory  <- model %>% fit(\n  x_train_reshaped,\n  y_train,\n  epochs = 3,\n  batch_size = 128,\n  validation_split = 0.2\n)\n\n\n# plot training history\nhistory %>% \n  plot() + \n  geom_point(size = 3) + \n  geom_line(linetype = \"dashed\")\n\n\n\n\n\ntest_metrics <- model %>% \n  evaluate(x_test_reshaped, y_test)\n\ntest_metrics[\"accuracy\"] %>% round(., 3)\n\naccuracy \n   0.974 \n\n\n\n# get test set predictions\ny_hat <- model %>%\n  predict(x_test_reshaped) %>% \n  k_argmax() %>%\n  as.array()\n\n# get test set real labels\ny_obs <- y_test %>% \n   k_argmax() %>%\n   as.array()\n\n# get misclassified samples indexes\nmisclass_idx = which(y_hat != y_obs)\n\n# plot 25 misclassified digits\npar(mfcol=c(5, 5))\npar(mar=c(0, 0, 2.5, 0), xaxs = 'i', yaxs = 'i')\n    \nfor (i in misclass_idx[0:25]) {\n      img <- x_test[i,,]\n      img <- t(apply(img, 2, rev))\n      image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',\n        main = paste(\"Predicted: \", y_hat[i] , \"\\nTrue: \", y_obs[i]))\n}"
  },
  {
    "objectID": "posts/post3/index.html",
    "href": "posts/post3/index.html",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 3, Section 5 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\nTwo-class classification, or binary classification, may be the most widely applied kind of machine learning problem. In this example, we will learn to classify movie reviews into “positive” reviews and “negative” reviews, just based on the text content of the reviews."
  },
  {
    "objectID": "posts/post3/index.html#the-imdb-dataset",
    "href": "posts/post3/index.html#the-imdb-dataset",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "The IMDB dataset",
    "text": "The IMDB dataset\nWe’ll be working with “IMDB dataset”, a set of 50,000 highly-polarized reviews from the Internet Movie Database. They are split into 25,000 reviews for training and 25,000 reviews for testing, each set consisting in 50% negative and 50% positive reviews.\nWhy do we have these two separate training and test sets? You should never test a machine learning model on the same data that you used to train it! Just because a model performs well on its training data doesn’t mean that it will perform well on data it has never seen, and what you actually care about is your model’s performance on new data (since you already know the labels of your training data – obviously you don’t need your model to predict those). For instance, it is possible that your model could end up merely memorizing a mapping between your training samples and their targets – which would be completely useless for the task of predicting targets for data never seen before. We will go over this point in much more detail in the next chapter.\nJust like the MNIST dataset, the IMDB dataset comes packaged with Keras. It has already been preprocessed: the reviews (sequences of words) have been turned into sequences of integers, where each integer stands for a specific word in a dictionary.\nThe following code will load the dataset (when you run it for the first time, about 80MB of data will be downloaded to your machine):\n\nlibrary(keras)\n\nimdb <- dataset_imdb(num_words = 10000)\nc(c(train_data, train_labels), c(test_data, test_labels)) %<-% imdb\n\nThe argument num_words = 10000 means that we will only keep the top 10,000 most frequently occurring words in the training data. Rare words will be discarded. This allows us to work with vector data of manageable size.\nThe variables train_data and test_data are lists of reviews, each review being a list of word indices (encoding a sequence of words). train_labels and test_labels are lists of 0s and 1s, where 0 stands for “negative” and 1 stands for “positive”:\n\nstr(train_data[[1]])\n\n int [1:218] 1 14 22 16 43 530 973 1622 1385 65 ...\n\n\n\ntrain_labels[[1]]\n\n[1] 1\n\n\nSince we restricted ourselves to the top 10,000 most frequent words, no word index will exceed 10,000:\n\nmax(sapply(train_data, max))\n\n[1] 9999\n\n\nFor kicks, here’s how you can quickly decode one of these reviews back to English words:\n\n# word_index is a dictionary mapping words to an integer index\nword_index <- dataset_imdb_word_index()\n# We reverse it, mapping integer indices to words\nreverse_word_index <- names(word_index)\nnames(reverse_word_index) <- word_index\n# We decode the review; note that our indices were offset by 3\n# because 0, 1 and 2 are reserved indices for \"padding\", \"start of sequence\", and \"unknown\".\ndecoded_review <- sapply(train_data[[1]], function(index) {\n  word <- if (index >= 3) reverse_word_index[[as.character(index - 3)]]\n  if (!is.null(word)) word else \"?\"\n})\n\n\ncat(decoded_review)\n\n? this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert ? is an amazing actor and now the same being director ? father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for ? and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also ? to the two little boy's that played the ? of norman and paul they were just brilliant children are often left out of the ? list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all"
  },
  {
    "objectID": "posts/post3/index.html#preparing-the-data",
    "href": "posts/post3/index.html#preparing-the-data",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Preparing the data",
    "text": "Preparing the data\nYou can’t feed lists of integers into a neural network. You have to turn your lists into tensors. There are two ways to do that:\n\nPad your lists so that they all have the same length, turn them into an integer tensor of shape (samples, word_indices), and then use as the first layer in your network a layer capable of handling such integer tensors (the “embedding” layer, which we’ll cover in detail later in the book).\nOne-hot-encode your lists to turn them into vectors of 0s and 1s. This would mean, for instance, turning the sequence [3, 5] into a 10,000-dimensional vector that would be all zeros except for indices 3 and 5, which would be ones. Then you could use as the first layer in your network a dense layer, capable of handling floating-point vector data.\n\nLet’s go with the latter solution and vectorize the data, which you’ll do manually for maximum clarity.\n\nvectorize_sequences <- function(sequences, dimension = 10000) {\n  # Create an all-zero matrix of shape (len(sequences), dimension)\n  results <- matrix(0, nrow = length(sequences), ncol = dimension)\n  for (i in 1:length(sequences))\n    # Sets specific indices of results[i] to 1s\n    results[i, sequences[[i]]] <- 1\n  results\n}\n\n# Our vectorized training data\nx_train <- vectorize_sequences(train_data)\n# Our vectorized test data\nx_test <- vectorize_sequences(test_data)\n\nHere’s what our samples look like now:\n\nstr(x_train[1,])\n\n num [1:10000] 1 1 0 1 1 1 1 1 1 0 ...\n\n\nWe should also vectorize our labels, which is straightforward:\n\n# Our vectorized labels\ny_train <- as.numeric(train_labels)\ny_test <- as.numeric(test_labels)\n\nNow our data is ready to be fed into a neural network."
  },
  {
    "objectID": "posts/post3/index.html#building-our-network",
    "href": "posts/post3/index.html#building-our-network",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Building our network",
    "text": "Building our network\nThe input data is vectors, and the labels are scalars (1s and 0s): this is the easiest setup you’ll ever encounter. A type of network that performs well on such a problem is a simple stack of fully connected (“dense”) layers with relu activations: layer_dense(units = 16, activation = \"relu\").\nThe argument being passed to each dense layer (16) is the number of hidden units of the layer. A hidden unit is a dimension in the representation space of the layer. You may remember from chapter 2 that each such dense layer with a relu activation implements the following chain of tensor operations:\noutput = relu(dot(W, input) + b)\nHaving 16 hidden units means that the weight matrix W will have shape (input_dimension, 16), i.e. the dot product with W will project the input data onto a 16-dimensional representation space (and then we would add the bias vector b and apply the relu operation). You can intuitively understand the dimensionality of your representation space as “how much freedom you are allowing the network to have when learning internal representations”. Having more hidden units (a higher-dimensional representation space) allows your network to learn more complex representations, but it makes your network more computationally expensive and may lead to learning unwanted patterns (patterns that will improve performance on the training data but not on the test data).\nThere are two key architecture decisions to be made about such stack of dense layers:\n\nHow many layers to use.\nHow many “hidden units” to chose for each layer.\n\nIn the next chapter, you will learn formal principles to guide you in making these choices. For the time being, you will have to trust us with the following architecture choice: two intermediate layers with 16 hidden units each, and a third layer which will output the scalar prediction regarding the sentiment of the current review. The intermediate layers will use relu as their “activation function”, and the final layer will use a sigmoid activation so as to output a probability (a score between 0 and 1, indicating how likely the sample is to have the target “1”, i.e. how likely the review is to be positive). A relu (rectified linear unit) is a function meant to zero-out negative values, while a sigmoid “squashes” arbitrary values into the [0, 1] interval, thus outputting something that can be interpreted as a probability.\nHere’s what our network looks like:\n\n\n\n3-layer network\n\n\nAnd here’s the Keras implementation, very similar to the MNIST example you saw previously:\n\nlibrary(keras)\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nLastly, we need to pick a loss function and an optimizer. Since we are facing a binary classification problem and the output of our network is a probability (we end our network with a single-unit layer with a sigmoid activation), is it best to use the binary_crossentropy loss. It isn’t the only viable choice: you could use, for instance, mean_squared_error. But crossentropy is usually the best choice when you are dealing with models that output probabilities. Crossentropy is a quantity from the field of Information Theory, that measures the “distance” between probability distributions, or in our case, between the ground-truth distribution and our predictions.\nHere’s the step where we configure our model with the rmsprop optimizer and the binary_crossentropy loss function. Note that we will also monitor accuracy during training.\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nYou’re passing your optimizer, loss function, and metrics as strings, which is possible because rmsprop, binary_crossentropy, and accuracy are packaged as part of Keras. Sometimes you may want to configure the parameters of your optimizer or pass a custom loss function or metric function. The former can be done by passing an optimizer instance as the optimizer argument:\n\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(lr=0.001),\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n) \n\nThe latter can be done by passing function objects as the loss or metrics arguments:\n\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(lr = 0.001),\n  loss = loss_binary_crossentropy,\n  metrics = metric_binary_accuracy\n)"
  },
  {
    "objectID": "posts/post3/index.html#validating-our-approach",
    "href": "posts/post3/index.html#validating-our-approach",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Validating our approach",
    "text": "Validating our approach\nIn order to monitor during training the accuracy of the model on data that it has never seen before, we will create a “validation set” by setting apart 10,000 samples from the original training data:\n\nval_indices <- 1:10000\n\nx_val <- x_train[val_indices,]\npartial_x_train <- x_train[-val_indices,]\n\ny_val <- y_train[val_indices]\npartial_y_train <- y_train[-val_indices]\n\nWe will now train our model for 20 epochs (20 iterations over all samples in the x_train and y_train tensors), in mini-batches of 512 samples. At this same time we will monitor loss and accuracy on the 10,000 samples that we set apart. This is done by passing the validation data as the validation_data argument:\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nhistory <- model %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 20,\n  batch_size = 512,\n  validation_data = list(x_val, y_val)\n)\n\nOn CPU, this will take less than two seconds per epoch – training is over in 20 seconds. At the end of every epoch, there is a slight pause as the model computes its loss and accuracy on the 10,000 samples of the validation data.\nNote that the call to fit() returns a history object. Let’s take a look at it:\n\nstr(history)\n\nList of 2\n $ params :List of 3\n  ..$ verbose: int 1\n  ..$ epochs : int 20\n  ..$ steps  : int 30\n $ metrics:List of 4\n  ..$ loss        : num [1:20] 0.537 0.329 0.245 0.199 0.164 ...\n  ..$ accuracy    : num [1:20] 0.761 0.894 0.92 0.934 0.947 ...\n  ..$ val_loss    : num [1:20] 0.415 0.327 0.321 0.278 0.279 ...\n  ..$ val_accuracy: num [1:20] 0.848 0.875 0.868 0.887 0.886 ...\n - attr(*, \"class\")= chr \"keras_training_history\"\n\n\nThe history object includes various parameters used to fit the model (history$params) as well as data for each of the metrics being monitored (history$metrics).\nThe history object has a plot() method that enables us to visualize the training and validation metrics by epoch:\n\nplot(history)\n\n\n\n\nThe accuracy is plotted on the top panel and the loss on the bottom panel. Note that your own results may vary slightly due to a different random initialization of your network.\nThe dots are the training loss and accuracy, while the solid lines are the validation loss and accuracy. Note that your own results may vary slightly due to a different random initialization of your network.\nAs you can see, the training loss decreases with every epoch, and the training accuracy increases with every epoch. That’s what you would expect when running a gradient-descent optimization – the quantity you’re trying to minimize should be less with every iteration. But that isn’t the case for the validation loss and accuracy: they seem to peak at the fourth epoch. This is an example of what we warned against earlier: a model that performs better on the training data isn’t necessarily a model that will do better on data it has never seen before. In precise terms, what you’re seeing is overfitting: after the second epoch, you’re over-optimizing on the training data, and you end up learning representations that are specific to the training data and don’t generalize to data outside of the training set.\nIn this case, to prevent overfitting, you could stop training after three epochs. In general, you can use a range of techniques to mitigate overfitting, which we’ll cover in chapter 4.\nLet’s train a new network from scratch for four epochs and then evaluate it on the test data.\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nmodel %>% fit(x_train, y_train, epochs = 4, batch_size = 512)\nresults <- model %>% evaluate(x_test, y_test)\n\n\nresults\n\n     loss  accuracy \n0.2912865 0.8824400 \n\n\nOur fairly naive approach achieves an accuracy of 88%. With state-of-the-art approaches, one should be able to get close to 95%."
  },
  {
    "objectID": "posts/post3/index.html#using-a-trained-network-to-generate-predictions-on-new-data",
    "href": "posts/post3/index.html#using-a-trained-network-to-generate-predictions-on-new-data",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Using a trained network to generate predictions on new data",
    "text": "Using a trained network to generate predictions on new data\nAfter having trained a network, you’ll want to use it in a practical setting. You can generate the likelihood of reviews being positive by using the predict method:\n\nmodel %>% predict(x_test[1:10,])\n\n             [,1]\n [1,] 0.175282568\n [2,] 0.997940540\n [3,] 0.777074456\n [4,] 0.682692409\n [5,] 0.936749279\n [6,] 0.690792143\n [7,] 0.998066068\n [8,] 0.004375105\n [9,] 0.943333447\n[10,] 0.980040669\n\n\nAs you can see, the network is very confident for some samples (0.99 or more, or 0.02 or less) but less confident for others."
  },
  {
    "objectID": "posts/post3/index.html#further-experiments",
    "href": "posts/post3/index.html#further-experiments",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Further experiments",
    "text": "Further experiments\n\nWe were using 2 hidden layers. Try to use 1 or 3 hidden layers and see how it affects validation and test accuracy.\nTry to use layers with more hidden units or less hidden units: 32 units, 64 units…\nTry to use the mse loss function instead of binary_crossentropy.\nTry to use the tanh activation (an activation that was popular in the early days of neural networks) instead of relu.\n\nThese experiments will help convince you that the architecture choices we have made are all fairly reasonable, although they can still be improved!"
  },
  {
    "objectID": "posts/post3/index.html#conclusions",
    "href": "posts/post3/index.html#conclusions",
    "title": "Classifying movie reviews: a binary classification example",
    "section": "Conclusions",
    "text": "Conclusions\nHere’s what you should take away from this example:\n\nYou usually need to do quite a bit of preprocessing on your raw data in order to be able to feed it – as tensors – into a neural network. Sequences of words can be encoded as binary vectors, but there are other encoding options, too.\nStacks of dense layers with relu activations can solve a wide range of problems (including sentiment classification), and you’ll likely use them frequently.\nIn a binary classification problem (two output classes), your network should end with a dense layer with one unit and a sigmoid activation. That is, the output of your network should be a scalar between 0 and 1, encoding a probability.\nWith such a scalar sigmoid output on a binary classification problem, the loss function you should use is binary_crossentropy.\nThe rmsprop optimizer is generally a good enough choice, whatever your problem. That’s one less thing for you to worry about.\nAs they get better on their training data, neural networks eventually start overfitting and end up obtaining increasingly worse results on data they’ve never seen before. Be sure to always monitor performance on data that is outside of the training set."
  },
  {
    "objectID": "posts/post4/index.html",
    "href": "posts/post4/index.html",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 3, Section 6 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\nIn the previous section we saw how to classify vector inputs into two mutually exclusive classes using a densely-connected neural network. But what happens when you have more than two classes?\nIn this section, we will build a network to classify Reuters newswires into 46 different mutually-exclusive topics. Since we have many classes, this problem is an instance of “multi-class classification”, and since each data point should be classified into only one category, the problem is more specifically an instance of “single-label, multi-class classification”. If each data point could have belonged to multiple categories (in our case, topics) then we would be facing a “multi-label, multi-class classification” problem."
  },
  {
    "objectID": "posts/post4/index.html#the-reuters-dataset",
    "href": "posts/post4/index.html#the-reuters-dataset",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "The Reuters dataset",
    "text": "The Reuters dataset\nWe will be working with the Reuters dataset, a set of short newswires and their topics, published by Reuters in 1986. It’s a very simple, widely used toy dataset for text classification. There are 46 different topics; some topics are more represented than others, but each topic has at least 10 examples in the training set.\nLike IMDB and MNIST, the Reuters dataset comes packaged as part of Keras. Let’s take a look right away:\n\nlibrary(keras)\n\nreuters <- dataset_reuters(num_words = 10000)\nc(c(train_data, train_labels), c(test_data, test_labels)) %<-% reuters\n\nLike with the IMDB dataset, the argument num_words = 10000 restricts the data to the 10,000 most frequently occurring words found in the data.\nWe have 8,982 training examples and 2,246 test examples:\n\nlength(train_data)\n\n[1] 8982\n\n\n\nlength(test_data)\n\n[1] 2246\n\n\nAs with the IMDB reviews, each example is a list of integers (word indices):\n\ntrain_data[[1]]\n\n [1]    1    2    2    8   43   10  447    5   25  207  270    5 3095  111   16\n[16]  369  186   90   67    7   89    5   19  102    6   19  124   15   90   67\n[31]   84   22  482   26    7   48    4   49    8  864   39  209  154    6  151\n[46]    6   83   11   15   22  155   11   15    7   48    9 4579 1005  504    6\n[61]  258    6  272   11   15   22  134   44   11   15   16    8  197 1245   90\n[76]   67   52   29  209   30   32  132    6  109   15   17   12\n\n\nHere’s how you can decode it back to words, in case you are curious:\n\nword_index <- dataset_reuters_word_index()\nreverse_word_index <- names(word_index)\nnames(reverse_word_index) <- word_index\ndecoded_newswire <- sapply(train_data[[1]], function(index) {\n  # Note that our indices were offset by 3 because 0, 1, and 2\n  # are reserved indices for \"padding\", \"start of sequence\", and \"unknown\".\n  word <- if (index >= 3) reverse_word_index[[as.character(index - 3)]]\n  if (!is.null(word)) word else \"?\"\n})\n\n\ncat(decoded_newswire)\n\n? ? ? said as a result of its december acquisition of space co it expects earnings per share in 1987 of 1 15 to 1 30 dlrs per share up from 70 cts in 1986 the company said pretax net should rise to nine to 10 mln dlrs from six mln dlrs in 1986 and rental operation revenues to 19 to 22 mln dlrs from 12 5 mln dlrs it said cash flow per share this year should be 2 50 to three dlrs reuter 3\n\n\nThe label associated with an example is an integer between 0 and 45: a topic index.\n\ntrain_labels[[1]]\n\n[1] 3"
  },
  {
    "objectID": "posts/post4/index.html#preparing-the-data",
    "href": "posts/post4/index.html#preparing-the-data",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Preparing the data",
    "text": "Preparing the data\nWe can vectorize the data with the exact same code as in our previous example:\n\nvectorize_sequences <- function(sequences, dimension = 10000) {\n  results <- matrix(0, nrow = length(sequences), ncol = dimension)\n  for (i in 1:length(sequences))\n    results[i, sequences[[i]]] <- 1\n  results\n}\n\nx_train <- vectorize_sequences(train_data)\nx_test <- vectorize_sequences(test_data)\n\nTo vectorize the labels, there are two possibilities: we could just cast the label list as an integer tensor, or we could use a “one-hot” encoding. One-hot encoding is a widely used format for categorical data, also called “categorical encoding”. For a more detailed explanation of one-hot encoding, you can refer to Chapter 6, Section 1. In our case, one-hot encoding of our labels consists in embedding each label as an all-zero vector with a 1 in the place of the label index, e.g.:\n\nto_one_hot <- function(labels, dimension = 46) {\n  results <- matrix(0, nrow = length(labels), ncol = dimension)\n  for (i in 1:length(labels))\n    results[i, labels[[i]] + 1] <- 1\n  results\n}\n\none_hot_train_labels <- to_one_hot(train_labels)\none_hot_test_labels <- to_one_hot(test_labels)\n\nNote that there is a built-in way to do this in Keras, which you have already seen in action in our MNIST example:\n\none_hot_train_labels <- to_categorical(train_labels)\none_hot_test_labels <- to_categorical(test_labels)"
  },
  {
    "objectID": "posts/post4/index.html#building-our-network",
    "href": "posts/post4/index.html#building-our-network",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Building our network",
    "text": "Building our network\nThis topic classification problem looks very similar to our previous movie review classification problem: in both cases, we are trying to classify short snippets of text. There is however a new constraint here: the number of output classes has gone from 2 to 46, i.e. the dimensionality of the output space is much larger.\nIn a stack of dense layers like what we were using, each layer can only access information present in the output of the previous layer. If one layer drops some information relevant to the classification problem, this information can never be recovered by later layers: each layer can potentially become an “information bottleneck”. In our previous example, we were using 16-dimensional intermediate layers, but a 16-dimensional space may be too limited to learn to separate 46 different classes: such small layers may act as information bottlenecks, permanently dropping relevant information.\nFor this reason we will use larger layers. Let’s go with 64 units:\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 64, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 64, activation = \"relu\") %>% \n  layer_dense(units = 46, activation = \"softmax\")\n\nThere are two other things you should note about this architecture:\n\nYou end the network with a dense layer of size 46. This means for each input sample, the network will output a 46-dimensional vector. Each entry in this vector (each dimension) will encode a different output class.\nThe last layer uses a softmax activation. You saw this pattern in the MNIST example. It means the network will output a probability distribution over the 46 different output classes: that is, for every input sample, the network will produce a 46-dimensional output vector, where output[[i]] is the probability that the sample belongs to class i. The 46 scores will sum to 1.\n\nThe best loss function to use in this case is categorical_crossentropy. It measures the distance between two probability distributions: in our case, between the probability distribution output by our network, and the true distribution of the labels. By minimizing the distance between these two distributions, we train our network to output something as close as possible to the true labels.\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)"
  },
  {
    "objectID": "posts/post4/index.html#validating-our-approach",
    "href": "posts/post4/index.html#validating-our-approach",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Validating our approach",
    "text": "Validating our approach\nLet’s set apart 1,000 samples in our training data to use as a validation set:\n\nval_indices <- 1:1000\n\nx_val <- x_train[val_indices,]\npartial_x_train <- x_train[-val_indices,]\n\ny_val <- one_hot_train_labels[val_indices,]\npartial_y_train = one_hot_train_labels[-val_indices,]\n\nNow let’s train our network for 20 epochs:\n\nhistory <- model %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 20,\n  batch_size = 512,\n  validation_data = list(x_val, y_val)\n)\n\nLet’s display its loss and accuracy curves:\n\nplot(history)\n\n\n\n\nThe network begins to overfit after nine epochs. Let’s train a new network from scratch for nine epochs and then evaluate it on the test set.\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 64, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 64, activation = \"relu\") %>% \n  layer_dense(units = 46, activation = \"softmax\")\n  \nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nhistory <- model %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 9,\n  batch_size = 512,\n  validation_data = list(x_val, y_val)\n)\n\nresults <- model %>% evaluate(x_test, one_hot_test_labels)\n\n\nresults\n\n     loss  accuracy \n0.9537860 0.7840605 \n\n\nOur approach reaches an accuracy of ~78%. With a balanced binary classification problem, the accuracy reached by a purely random classifier would be 50%, but in our case it is closer to 19%, so our results seem pretty good, at least when compared to a random baseline:\n\ntest_labels_copy <- test_labels\ntest_labels_copy <- sample(test_labels_copy)\nlength(which(test_labels == test_labels_copy)) / length(test_labels)\n\n[1] 0.1789849"
  },
  {
    "objectID": "posts/post4/index.html#generating-predictions-on-new-data",
    "href": "posts/post4/index.html#generating-predictions-on-new-data",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Generating predictions on new data",
    "text": "Generating predictions on new data\nWe can verify that the predict method of our model instance returns a probability distribution over all 46 topics. Let’s generate topic predictions for all of the test data:\n\npredictions <- model %>% predict(x_test)\n\nEach entry in predictions is a vector of length 46:\n\ndim(predictions)\n\n[1] 2246   46\n\n\nThe coefficients in this vector sum to 1:\n\nsum(predictions[1,])\n\n[1] 1\n\n\nThe largest entry is the predicted class, i.e. the class with the highest probability:\n\nwhich.max(predictions[1,])\n\n[1] 4"
  },
  {
    "objectID": "posts/post4/index.html#a-different-way-to-handle-the-labels-and-the-loss",
    "href": "posts/post4/index.html#a-different-way-to-handle-the-labels-and-the-loss",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "A different way to handle the labels and the loss",
    "text": "A different way to handle the labels and the loss\nWe mentioned earlier that another way to encode the labels would be to preserve their integer values. The only thing this approach would change is the choice of the loss function. The previous loss, categorical_crossentropy, expects the labels to follow a categorical encoding. With integer labels, you should use sparse_categorical_crossentropy:\n\nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"sparse_categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nThis new loss function is still mathematically the same as categorical_crossentropy; it just has a different interface."
  },
  {
    "objectID": "posts/post4/index.html#on-the-importance-of-having-sufficiently-large-intermediate-layers",
    "href": "posts/post4/index.html#on-the-importance-of-having-sufficiently-large-intermediate-layers",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "On the importance of having sufficiently large intermediate layers",
    "text": "On the importance of having sufficiently large intermediate layers\nWe mentioned earlier that since our final outputs were 46-dimensional, we should avoid intermediate layers with much less than 46 hidden units. Now let’s try to see what happens when we introduce an information bottleneck by having intermediate layers significantly less than 46-dimensional, e.g. 4-dimensional.\n\nmodel <- keras_model_sequential() %>% \n  layer_dense(units = 64, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 4, activation = \"relu\") %>% \n  layer_dense(units = 46, activation = \"softmax\")\n  \nmodel %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nmodel %>% fit(\n  partial_x_train,\n  partial_y_train,\n  epochs = 20,\n  batch_size = 128,\n  validation_data = list(x_val, y_val)\n)\n\nOur network now seems to peak at ~71% test accuracy, a 8% absolute drop. This drop is mostly due to the fact that we are now trying to compress a lot of information (enough information to recover the separation hyperplanes of 46 classes) into an intermediate space that is too low-dimensional. The network is able to cram most of the necessary information into these 8-dimensional representations, but not all of it."
  },
  {
    "objectID": "posts/post4/index.html#further-experiments",
    "href": "posts/post4/index.html#further-experiments",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Further experiments",
    "text": "Further experiments\n\nTry using larger or smaller layers: 32 units, 128 units…\nWe were using two hidden layers. Now try to use a single hidden layer, or three hidden layers."
  },
  {
    "objectID": "posts/post4/index.html#wrapping-up",
    "href": "posts/post4/index.html#wrapping-up",
    "title": "Classifying newswires: a multi-class classification example",
    "section": "Wrapping up",
    "text": "Wrapping up\nHere’s what you should take away from this example:\n\nIf you are trying to classify data points between N classes, your network should end with a dense layer of size N.\nIn a single-label, multi-class classification problem, your network should end with a softmax activation, so that it will output a probability distribution over the N output classes.\nCategorical crossentropy is almost always the loss function you should use for such problems. It minimizes the distance between the probability distributions output by the network, and the true distribution of the targets.\nThere are two ways to handle labels in multi-class classification:\n\nEncoding the labels via “categorical encoding” (also known as “one-hot encoding”) and using categorical_crossentropy as your loss function.\nEncoding the labels as integers and using the sparse_categorical_crossentropy loss function.\n\nIf you need to classify data into a large number of categories, then you should avoid creating information bottlenecks in your network by having intermediate layers that are too small."
  },
  {
    "objectID": "posts/post5/index.html",
    "href": "posts/post5/index.html",
    "title": "Overfitting and underfitting",
    "section": "",
    "text": "This notebook contains the code samples found in Chapter 4, Section 1 of Deep Learning with R. Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\nIn all the examples we saw in the previous chapter – movie review sentiment prediction, topic classification, and house price regression – we could notice that the performance of our model on the held-out validation data would always peak after a few epochs and would then start degrading, i.e. our model would quickly start to overfit to the training data. Overfitting happens in every single machine learning problem. Learning how to deal with overfitting is essential to mastering machine learning.\nThe fundamental issue in machine learning is the tension between optimization and generalization. “Optimization” refers to the process of adjusting a model to get the best performance possible on the training data (the “learning” in “machine learning”), while “generalization” refers to how well the trained model would perform on data it has never seen before. The goal of the game is to get good generalization, of course, but you do not control generalization; you can only adjust the model based on its training data.\nAt the beginning of training, optimization and generalization are correlated: the lower your loss on training data, the lower your loss on test data. While this is happening, your model is said to be under-fit: there is still progress to be made; the network hasn’t yet modeled all relevant patterns in the training data. But after a certain number of iterations on the training data, generalization stops improving, validation metrics stall then start degrading: the model is then starting to over-fit, i.e. is it starting to learn patterns that are specific to the training data but that are misleading or irrelevant when it comes to new data.\nTo prevent a model from learning misleading or irrelevant patterns found in the training data, the best solution is of course to get more training data. A model trained on more data will naturally generalize better. When that is no longer possible, the next best solution is to modulate the quantity of information that your model is allowed to store, or to add constraints on what information it is allowed to store. If a network can only afford to memorize a small number of patterns, the optimization process will force it to focus on the most prominent patterns, which have a better chance of generalizing well.\nThe processing of fighting overfitting in this way is called regularization. Let’s review some of the most common regularization techniques, and let’s apply them in practice to improve our movie classification model from the previous chapter.\nNote: in this notebook we will be using the IMDB test set as our validation set. It doesn’t matter in this context.\nLet’s prepare the data using the code from Chapter 3, Section 5:"
  },
  {
    "objectID": "posts/post5/index.html#reducing-the-networks-size",
    "href": "posts/post5/index.html#reducing-the-networks-size",
    "title": "Overfitting and underfitting",
    "section": "Reducing the network’s size",
    "text": "Reducing the network’s size\nThe simplest way to prevent overfitting is to reduce the size of the model, i.e. the number of learnable parameters in the model (which is determined by the number of layers and the number of units per layer). In deep learning, the number of learnable parameters in a model is often referred to as the model’s “capacity”. Intuitively, a model with more parameters will have more “memorization capacity” and therefore will be able to easily learn a perfect dictionary-like mapping between training samples and their targets, a mapping without any generalization power. For instance, a model with 500,000 binary parameters could easily be made to learn the class of every digits in the MNIST training set: we would only need 10 binary parameters for each of the 50,000 digits. Such a model would be useless for classifying new digit samples. Always keep this in mind: deep learning models tend to be good at fitting to the training data, but the real challenge is generalization, not fitting.\nOn the other hand, if the network has limited memorization resources, it will not be able to learn this mapping as easily, and thus, in order to minimize its loss, it will have to resort to learning compressed representations that have predictive power regarding the targets – precisely the type of representations that we are interested in. At the same time, keep in mind that you should be using models that have enough parameters that they won’t be underfitting: your model shouldn’t be starved for memorization resources. There is a compromise to be found between “too much capacity” and “not enough capacity”.\nUnfortunately, there is no magical formula to determine what the right number of layers is, or what the right size for each layer is. You will have to evaluate an array of different architectures (on your validation set, not on your test set, of course) in order to find the right model size for your data. The general workflow to find an appropriate model size is to start with relatively few layers and parameters, and start increasing the size of the layers or adding new layers until you see diminishing returns with regard to the validation loss.\nLet’s try this on our movie review classification network. Our original network was as such:\n\noriginal_model <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\noriginal_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nNow let’s try to replace it with this smaller network:\n\nsmaller_model <- keras_model_sequential() %>% \n  layer_dense(units = 4, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 4, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nsmaller_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n\nLet’s train both the original and smaller network:\n\n\n\n\n\n\nTo compare the losses we’ll write an R function that takes a named list of loss series and plots it:\n\nlibrary(ggplot2)\nlibrary(tidyr)\nplot_training_losses <- function(losses) {\n  loss_names <- names(losses)\n  losses <- as.data.frame(losses)\n  losses$epoch <- seq_len(nrow(losses))\n  losses %>% \n    gather(model, loss, loss_names[[1]], loss_names[[2]]) %>% \n    ggplot(aes(x = epoch, y = loss, colour = model)) +\n    geom_point()\n}\n\nHere’s a comparison of the validation losses of the original network and the smaller network:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  smaller_model = smaller_model_hist$metrics$val_loss\n))\n\n\n\n\nAs you can see, the smaller network starts overfitting later than the reference one and its performance degrades much more slowly once it starts overfitting.\nNow, for kicks, let’s add to this benchmark a network that has much more capacity, far more than the problem would warrant:\n\nbigger_model <- keras_model_sequential() %>% \n  layer_dense(units = 512, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 512, activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nbigger_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c('acc')\n)\n\n\n\n\nHere’s how the bigger network fares compared to the reference one:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  bigger_model = bigger_model_hist$metrics$val_loss\n))\n\n\n\n\nThe bigger network starts overfitting almost right away, after just one epoch, and overfits much more severely. Its validation loss is also more noisy.\nMeanwhile, here are the training losses for our two networks:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$loss,\n  bigger_model = bigger_model_hist$metrics$loss\n))\n\n\n\n\nAs you can see, the bigger network gets its training loss near zero very quickly. The more capacity the network has, the quicker it will be able to model the training data (resulting in a low training loss), but the more susceptible it is to overfitting (resulting in a large difference between the training and validation loss)."
  },
  {
    "objectID": "posts/post5/index.html#adding-weight-regularization",
    "href": "posts/post5/index.html#adding-weight-regularization",
    "title": "Overfitting and underfitting",
    "section": "Adding weight regularization",
    "text": "Adding weight regularization\nYou may be familiar with Occam’s Razor principle: given two explanations for something, the explanation most likely to be correct is the “simplest” one, the one that makes the least amount of assumptions. This also applies to the models learned by neural networks: given some training data and a network architecture, there are multiple sets of weights values (multiple models) that could explain the data, and simpler models are less likely to overfit than complex ones.\nA “simple model” in this context is a model where the distribution of parameter values has less entropy (or a model with fewer parameters altogether, as we saw in the section above). Thus a common way to mitigate overfitting is to put constraints on the complexity of a network by forcing its weights to only take small values, which makes the distribution of weight values more “regular”. This is called “weight regularization”, and it is done by adding to the loss function of the network a cost associated with having large weights. This cost comes in two flavors:\n\nL1 regularization, where the cost added is proportional to the absolute value of the weights coefficients (i.e. to what is called the “L1 norm” of the weights).\nL2 regularization, where the cost added is proportional to the square of the value of the weights coefficients (i.e. to what is called the “L2 norm” of the weights). L2 regularization is also called weight decay in the context of neural networks. Don’t let the different name confuse you: weight decay is mathematically the exact same as L2 regularization.\n\nIn Keras, weight regularization is added by passing weight regularizer instances to layers as keyword arguments. Let’s add L2 weight regularization to our movie review classification network:\n\nl2_model <- keras_model_sequential() %>% \n  layer_dense(units = 16, kernel_regularizer = regularizer_l2(0.001),\n              activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dense(units = 16, kernel_regularizer = regularizer_l2(0.001),\n              activation = \"relu\") %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\nl2_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"acc\")\n)\n\nregularizer_l2(0.001) means every coefficient in the weight matrix of the layer will add 0.001 * weight_coefficient_value to the total loss of the network. Note that because this penalty is only added at training time, the loss for this network will be much higher at training than at test time.\nHere’s the impact of our L2 regularization penalty:\n\n\n\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  l2_model = l2_model_hist$metrics$val_loss\n))\n\n\n\n\nAs you can see, the model with L2 regularization has become much more resistant to overfitting than the reference model, even though both models have the same number of parameters.\nAs alternatives to L2 regularization, you could use one of the following Keras weight regularizers:\n\n# L1 regularization\nregularizer_l1(0.001)\n\n# L1 and L2 regularization at the same time\nregularizer_l1_l2(l1 = 0.001, l2 = 0.001)\n\nThis technique may seem strange and arbitrary. Why would this help reduce overfitting? Geoff Hinton has said that he was inspired, among other things, by a fraud prevention mechanism used by banks – in his own words: “I went to my bank. The tellers kept changing and I asked one of them why. He said he didn’t know but they got moved around a lot. I figured it must be because it would require cooperation between employees to successfully defraud the bank. This made me realize that randomly removing a different subset of neurons on each example would prevent conspiracies and thus reduce overfitting”.\nThe core idea is that introducing noise in the output values of a layer can break up happenstance patterns that are not significant (what Hinton refers to as “conspiracies”), which the network would start memorizing if no noise was present.\nIn Keras, you can introduce dropout in a network via layer_dropout(), which is applied to the output of layer right before it:\n\nlayer_dropout(rate = 0.5)\n\nLet’s add two dropout layers in our IMDB network to see how well they do at reducing overfitting:\n\ndpt_model <- keras_model_sequential() %>% \n  layer_dense(units = 16, activation = \"relu\", input_shape = c(10000)) %>% \n  layer_dropout(rate = 0.5) %>% \n  layer_dense(units = 16, activation = \"relu\") %>% \n  layer_dropout(rate = 0.5) %>% \n  layer_dense(units = 1, activation = \"sigmoid\")\n\ndpt_model %>% compile(\n  optimizer = \"rmsprop\",\n  loss = \"binary_crossentropy\",\n  metrics = c(\"acc\")\n)\n\n\ndpt_model_hist <- dpt_model %>% fit(\n  x_train, y_train,\n  epochs = 20,\n  batch_size = 512,\n  validation_data = list(x_test, y_test)\n)\n\nLet’s plot the results:\n\nplot_training_losses(losses = list(\n  original_model = original_hist$metrics$val_loss,\n  dpt_model = dpt_model_hist$metrics$val_loss\n))\n\n\n\n\nAgain, a clear improvement over the reference network.\nTo recap: here the most common ways to prevent overfitting in neural networks:\n\nGetting more training data.\nReducing the capacity of the network.\nAdding weight regularization.\nAdding dropout."
  }
]